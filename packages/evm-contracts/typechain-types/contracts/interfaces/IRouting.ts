/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export declare namespace IRouting {
  export type TokenBalanceStruct = {
    tokenAddres: PromiseOrValue<string>;
    balance: PromiseOrValue<BigNumberish>;
  };

  export type TokenBalanceStructOutput = [string, BigNumber] & {
    tokenAddres: string;
    balance: BigNumber;
  };

  export type PoolDetailsStruct = {
    poolAddress: PromiseOrValue<string>;
    balances: IRouting.TokenBalanceStruct[];
    totalLPSupply: PromiseOrValue<BigNumberish>;
    ampFactor: PromiseOrValue<BigNumberish>;
    fees: PromiseOrValue<BigNumberish>;
  };

  export type PoolDetailsStructOutput = [
    string,
    IRouting.TokenBalanceStructOutput[],
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    poolAddress: string;
    balances: IRouting.TokenBalanceStructOutput[];
    totalLPSupply: BigNumber;
    ampFactor: BigNumber;
    fees: BigNumber;
  };
}

export interface IRoutingInterface extends utils.Interface {
  functions: {
    "getPoolsDetails(address[])": FunctionFragment;
    "onChainSwap(address,uint256,address,address,uint256)": FunctionFragment;
    "receiveAndSwap(bytes,address,uint256)": FunctionFragment;
    "receiveAndSwap2(bytes)": FunctionFragment;
    "registerToken(uint16,address,address,uint8)": FunctionFragment;
    "swapAndTransfer(address,uint256,uint256,uint16,bytes32)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "getPoolsDetails"
      | "onChainSwap"
      | "receiveAndSwap"
      | "receiveAndSwap2"
      | "registerToken"
      | "swapAndTransfer"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "getPoolsDetails",
    values: [PromiseOrValue<string>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "onChainSwap",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "receiveAndSwap",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "receiveAndSwap2",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "registerToken",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "swapAndTransfer",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "getPoolsDetails",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onChainSwap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "receiveAndSwap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "receiveAndSwap2",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapAndTransfer",
    data: BytesLike
  ): Result;

  events: {
    "OnChainSwap(address,address,address,uint256)": EventFragment;
    "ReceiveAndSwap(address,uint64,address,uint256)": EventFragment;
    "ReceiveAndSwap2(address,uint64,address,uint256)": EventFragment;
    "SwapAndTransfer(address,uint64,address,uint256)": EventFragment;
    "TokenRegistered(uint16,address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OnChainSwap"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ReceiveAndSwap"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ReceiveAndSwap2"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SwapAndTransfer"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokenRegistered"): EventFragment;
}

export interface OnChainSwapEventObject {
  to: string;
  fromToken: string;
  toToken: string;
  outputAmount: BigNumber;
}
export type OnChainSwapEvent = TypedEvent<
  [string, string, string, BigNumber],
  OnChainSwapEventObject
>;

export type OnChainSwapEventFilter = TypedEventFilter<OnChainSwapEvent>;

export interface ReceiveAndSwapEventObject {
  from: string;
  wormholeSequence: BigNumber;
  token: string;
  amount: BigNumber;
}
export type ReceiveAndSwapEvent = TypedEvent<
  [string, BigNumber, string, BigNumber],
  ReceiveAndSwapEventObject
>;

export type ReceiveAndSwapEventFilter = TypedEventFilter<ReceiveAndSwapEvent>;

export interface ReceiveAndSwap2EventObject {
  from: string;
  wormholeSequence: BigNumber;
  token: string;
  amount: BigNumber;
}
export type ReceiveAndSwap2Event = TypedEvent<
  [string, BigNumber, string, BigNumber],
  ReceiveAndSwap2EventObject
>;

export type ReceiveAndSwap2EventFilter = TypedEventFilter<ReceiveAndSwap2Event>;

export interface SwapAndTransferEventObject {
  from: string;
  wormholeSequence: BigNumber;
  token: string;
  inputAmount: BigNumber;
}
export type SwapAndTransferEvent = TypedEvent<
  [string, BigNumber, string, BigNumber],
  SwapAndTransferEventObject
>;

export type SwapAndTransferEventFilter = TypedEventFilter<SwapAndTransferEvent>;

export interface TokenRegisteredEventObject {
  tokenId: number;
  tokenContract: string;
  chainPool: string;
}
export type TokenRegisteredEvent = TypedEvent<
  [number, string, string],
  TokenRegisteredEventObject
>;

export type TokenRegisteredEventFilter = TypedEventFilter<TokenRegisteredEvent>;

export interface IRouting extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IRoutingInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    getPoolsDetails(
      poolAddresses: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    onChainSwap(
      fromToken: PromiseOrValue<string>,
      inputAmount: PromiseOrValue<BigNumberish>,
      toOwner: PromiseOrValue<string>,
      toToken: PromiseOrValue<string>,
      minimumOutputAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    receiveAndSwap(
      encodedVm: PromiseOrValue<BytesLike>,
      toToken: PromiseOrValue<string>,
      minimumOutputAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    receiveAndSwap2(
      encodedVm: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    registerToken(
      tokenId: PromiseOrValue<BigNumberish>,
      tokenContract: PromiseOrValue<string>,
      chainPool: PromiseOrValue<string>,
      tokenIndexInPool: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    swapAndTransfer(
      fromToken: PromiseOrValue<string>,
      inputAmount: PromiseOrValue<BigNumberish>,
      firstMinimumOutputAmount: PromiseOrValue<BigNumberish>,
      wormholeRecipientChain: PromiseOrValue<BigNumberish>,
      toOwner: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  getPoolsDetails(
    poolAddresses: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  onChainSwap(
    fromToken: PromiseOrValue<string>,
    inputAmount: PromiseOrValue<BigNumberish>,
    toOwner: PromiseOrValue<string>,
    toToken: PromiseOrValue<string>,
    minimumOutputAmount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  receiveAndSwap(
    encodedVm: PromiseOrValue<BytesLike>,
    toToken: PromiseOrValue<string>,
    minimumOutputAmount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  receiveAndSwap2(
    encodedVm: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  registerToken(
    tokenId: PromiseOrValue<BigNumberish>,
    tokenContract: PromiseOrValue<string>,
    chainPool: PromiseOrValue<string>,
    tokenIndexInPool: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  swapAndTransfer(
    fromToken: PromiseOrValue<string>,
    inputAmount: PromiseOrValue<BigNumberish>,
    firstMinimumOutputAmount: PromiseOrValue<BigNumberish>,
    wormholeRecipientChain: PromiseOrValue<BigNumberish>,
    toOwner: PromiseOrValue<BytesLike>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    getPoolsDetails(
      poolAddresses: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<IRouting.PoolDetailsStructOutput[]>;

    onChainSwap(
      fromToken: PromiseOrValue<string>,
      inputAmount: PromiseOrValue<BigNumberish>,
      toOwner: PromiseOrValue<string>,
      toToken: PromiseOrValue<string>,
      minimumOutputAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    receiveAndSwap(
      encodedVm: PromiseOrValue<BytesLike>,
      toToken: PromiseOrValue<string>,
      minimumOutputAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string] & { outputAmount: BigNumber; outpuToken: string }
    >;

    receiveAndSwap2(
      encodedVm: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string] & { outputAmount: BigNumber; outputToken: string }
    >;

    registerToken(
      tokenId: PromiseOrValue<BigNumberish>,
      tokenContract: PromiseOrValue<string>,
      chainPool: PromiseOrValue<string>,
      tokenIndexInPool: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    swapAndTransfer(
      fromToken: PromiseOrValue<string>,
      inputAmount: PromiseOrValue<BigNumberish>,
      firstMinimumOutputAmount: PromiseOrValue<BigNumberish>,
      wormholeRecipientChain: PromiseOrValue<BigNumberish>,
      toOwner: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {
    "OnChainSwap(address,address,address,uint256)"(
      to?: PromiseOrValue<string> | null,
      fromToken?: PromiseOrValue<string> | null,
      toToken?: PromiseOrValue<string> | null,
      outputAmount?: null
    ): OnChainSwapEventFilter;
    OnChainSwap(
      to?: PromiseOrValue<string> | null,
      fromToken?: PromiseOrValue<string> | null,
      toToken?: PromiseOrValue<string> | null,
      outputAmount?: null
    ): OnChainSwapEventFilter;

    "ReceiveAndSwap(address,uint64,address,uint256)"(
      from?: PromiseOrValue<string> | null,
      wormholeSequence?: null,
      token?: null,
      amount?: null
    ): ReceiveAndSwapEventFilter;
    ReceiveAndSwap(
      from?: PromiseOrValue<string> | null,
      wormholeSequence?: null,
      token?: null,
      amount?: null
    ): ReceiveAndSwapEventFilter;

    "ReceiveAndSwap2(address,uint64,address,uint256)"(
      from?: PromiseOrValue<string> | null,
      wormholeSequence?: null,
      token?: null,
      amount?: null
    ): ReceiveAndSwap2EventFilter;
    ReceiveAndSwap2(
      from?: PromiseOrValue<string> | null,
      wormholeSequence?: null,
      token?: null,
      amount?: null
    ): ReceiveAndSwap2EventFilter;

    "SwapAndTransfer(address,uint64,address,uint256)"(
      from?: PromiseOrValue<string> | null,
      wormholeSequence?: null,
      token?: null,
      inputAmount?: null
    ): SwapAndTransferEventFilter;
    SwapAndTransfer(
      from?: PromiseOrValue<string> | null,
      wormholeSequence?: null,
      token?: null,
      inputAmount?: null
    ): SwapAndTransferEventFilter;

    "TokenRegistered(uint16,address,address)"(
      tokenId?: PromiseOrValue<BigNumberish> | null,
      tokenContract?: PromiseOrValue<string> | null,
      chainPool?: null
    ): TokenRegisteredEventFilter;
    TokenRegistered(
      tokenId?: PromiseOrValue<BigNumberish> | null,
      tokenContract?: PromiseOrValue<string> | null,
      chainPool?: null
    ): TokenRegisteredEventFilter;
  };

  estimateGas: {
    getPoolsDetails(
      poolAddresses: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    onChainSwap(
      fromToken: PromiseOrValue<string>,
      inputAmount: PromiseOrValue<BigNumberish>,
      toOwner: PromiseOrValue<string>,
      toToken: PromiseOrValue<string>,
      minimumOutputAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    receiveAndSwap(
      encodedVm: PromiseOrValue<BytesLike>,
      toToken: PromiseOrValue<string>,
      minimumOutputAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    receiveAndSwap2(
      encodedVm: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    registerToken(
      tokenId: PromiseOrValue<BigNumberish>,
      tokenContract: PromiseOrValue<string>,
      chainPool: PromiseOrValue<string>,
      tokenIndexInPool: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    swapAndTransfer(
      fromToken: PromiseOrValue<string>,
      inputAmount: PromiseOrValue<BigNumberish>,
      firstMinimumOutputAmount: PromiseOrValue<BigNumberish>,
      wormholeRecipientChain: PromiseOrValue<BigNumberish>,
      toOwner: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    getPoolsDetails(
      poolAddresses: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    onChainSwap(
      fromToken: PromiseOrValue<string>,
      inputAmount: PromiseOrValue<BigNumberish>,
      toOwner: PromiseOrValue<string>,
      toToken: PromiseOrValue<string>,
      minimumOutputAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    receiveAndSwap(
      encodedVm: PromiseOrValue<BytesLike>,
      toToken: PromiseOrValue<string>,
      minimumOutputAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    receiveAndSwap2(
      encodedVm: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    registerToken(
      tokenId: PromiseOrValue<BigNumberish>,
      tokenContract: PromiseOrValue<string>,
      chainPool: PromiseOrValue<string>,
      tokenIndexInPool: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    swapAndTransfer(
      fromToken: PromiseOrValue<string>,
      inputAmount: PromiseOrValue<BigNumberish>,
      firstMinimumOutputAmount: PromiseOrValue<BigNumberish>,
      wormholeRecipientChain: PromiseOrValue<BigNumberish>,
      toOwner: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
