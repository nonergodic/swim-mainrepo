{
  "language": "Solidity",
  "sources": {
    "contracts/CenterAlignment.sol": {
      "content": "//SPDX-License-Identifier: TODO\npragma solidity ^0.8.0;\n\nimport \"./PoolErrors.sol\";\n\nlibrary CenterAlignment {\n// In the following constants and functions we think of a built-in uint\n//  as an array an array of 4 uint64, i.e. uint64[4] and use this to keep a\n//  block of 64 significant bits \"center-aligned\" i.e. within the bounds of the\n//  second and third uint64 (i.e. in the middle 128 bits), or in other words,\n//  out of the lower and upper 64 bits.\n//  This way we can always safely multiply or divide with an arbitrary uint64\n//  value without losing any significant bits, hence always holding on to full\n//  precision of our full 64 bit value, without having to constantly adjust the\n//  alignment i.e. shift up or shift down.\n//\n// The shift parameter tracks how far val needs to be RIGHT shifted to deflate\n//  val back to its original/base alignment (after we originally inflating it\n//  by center shifting it.)\n\nuint constant BITS_PER_UINT = 256;\nuint constant ALIGNMENT_SHIFT = BITS_PER_UINT/4; //=64\nuint constant CENTERING_SHIFT = ALIGNMENT_SHIFT + ALIGNMENT_SHIFT/2; //=96\n//shift right when greater than ALIGNMENT_UPPER_THRESHOLD\nuint constant ALIGNMENT_UPPER_THRESHOLD = (1 << (ALIGNMENT_SHIFT*3)) - 1;\n//shift left less than ALIGNMENT_LOWER_THRESHOLD\nuint constant ALIGNMENT_LOWER_THRESHOLD = 1 << (ALIGNMENT_SHIFT*2);\n\nfunction toAligned(uint val) internal pure returns (uint, int) {\n  return (val << CENTERING_SHIFT, int(CENTERING_SHIFT));\n}\n\nfunction keepAligned(uint val, int shift)\n  internal pure returns (uint, int) { unchecked {\n  if (val > ALIGNMENT_UPPER_THRESHOLD) {\n    //val has grown large enough to occupy space in the upper uint64\n    // => shift down and decrease required right shift\n    return (val >> ALIGNMENT_SHIFT, shift - int(ALIGNMENT_SHIFT));\n  }\n  if (val < ALIGNMENT_LOWER_THRESHOLD) {\n    //val has shrunk so much that it doesn't occupy the upper half anymore\n    // => shift up and increase required right shift\n    return (val << ALIGNMENT_SHIFT, shift + int(ALIGNMENT_SHIFT));\n  }\n  return (val, shift);\n}}\n\nfunction fromAligned(uint val, int shift)\n  internal pure returns (uint) { unchecked {\n  if (shift < 0) {\n    uint unshift = uint(-shift);\n    //ensure we aren't overflowing on rightshift\n    if (unshift >= BITS_PER_UINT || val >= (1<<(BITS_PER_UINT-unshift)))\n      revert CenterAlignment_NumericOverflow();\n    return val << unshift;\n  }\n  //potentially underflowing to 0 is ok\n  return val >> uint(shift);\n}}\n}\n"
    },
    "contracts/PoolErrors.sol": {
      "content": "//SPDX-License-Identifier: TODO\npragma solidity ^0.8.0;\n\n\nerror Equalize_MaxAmountExceeded(uint amount, int8 equalizer);\nerror Equalize_LosingAllPrecision(uint value, int8 equalizer);\n\nerror CenterAlignment_NumericOverflow();\n\nerror Invariant_UnknownBalanceTooLarge(uint unknownBalance);\n\nerror PoolMath_ImpossibleRemove();\n\n//governance errors:\nerror Pool_LpTokenInitializationFailed();\nerror Pool_FirstTokenNotSwimUSD(address value, address expected);\nerror Pool_MaxTokenCountExceeded(uint8 value, uint8 maximum);\nerror Pool_TokenEqualizerCountMismatch(uint8 count, uint8 expected);\nerror Pool_TokenEqualizerTooSmall(int8 equalizer, int8 minimum);\nerror Pool_TokenEqualizerTooLarge(int8 equalizer, int8 maximum);\nerror Pool_ConstantProductNotSupportedForTokenCount(uint8 tokenCount);\nerror Pool_AmpFactorTooSmall(uint32 ampFactor, uint32 minimum);\nerror Pool_AmpFactorTooLarge(uint32 ampFactor, uint32 maximum);\nerror Pool_AmpFactorIsFixedForConstantProductPools();\nerror Pool_AmpFactorTargetTimestampTooSmall(uint32 target, uint32 minimum);\nerror Pool_AmpFactorRelativeAdjustmentTooLarge(uint32 current, uint32 target, uint32 threshold);\nerror Pool_TotalFeeTooLarge(uint32 totalFee, uint32 maximum);\nerror Pool_NonZeroGovernanceFeeButNoRecipient();\n\n//defi errors:\nerror Pool_AmountCountMismatch(uint8 count, uint8 expected);\nerror Pool_InvalidTokenIndex(uint8 tokenIndex, uint8 tokenCount);\nerror Pool_SlippageExceeded(address token, uint amount, uint threshold);\nerror Pool_AmountExceedsSupply(address token, uint amount, uint poolbalance);\nerror Pool_RequestedTokenAmountNotZero(uint8 tokenIndex, uint amount);\nerror Pool_InitialAddMustIncludeAllTokens(uint8 missingAmountIndex);\n\nerror Pool_IsPaused();\nerror Pool_GovernanceOnly();\n"
    },
    "contracts/Invariant.sol": {
      "content": "//SPDX-License-Identifier: TODO\npragma solidity ^0.8.0;\n\nimport \"./Constants.sol\";\nimport \"./PoolErrors.sol\";\nimport \"./CenterAlignment.sol\";\nimport \"./Equalize.sol\";\n\nlibrary Invariant {\nusing CenterAlignment for uint;\n\n// RESTRICTIONS:\n// * Equalizeds use at most 61 bits (= ~18 digits).\n// * MAX_TOKEN_COUNT = 6 so that:\n//    * so TOKEN_COUNT+1 fits in 3 bits\n//    * sum of pool balances (and hence maximum depth) fits in 64 bits\n//      (depth is always less than or equal the sum of the pool balances)\n// * ampFactor fits within 30 bits (including decimals, i.e. AMP_SHIFT):\n//    * 2^20 = 1_048_576 ~= 10^6 so the max amp value of 1M fits in 20 bits\n//    * we use AMP_SHIFT = 10 bits for the fractional part (i.e. ~3 decimals)\n\n// General Considerations:\n//\n// uint    => 2^256 ~= 1.1 * 10^77\n// uint128 => 2^128 ~= 3.4 * 10^38\n// uint64  => 2^64  ~= 1.8 * 10^19\n//\n// We use a precision of 61 bits (18 digits, max value: 2^61 ~= 2.3 * 10^18)\n//  for all amounts (fixed point!). This is enough to accurately represent:\n//  * sensible USD amounts: Using 6 decimals for (sub)cents, this leaves us\n//                          with 12 digits, i.e. enough to represent $1T-1\n//                          999_999_999_999.000_000 USD => 18 digits\n//  * sensible ETH amounts: Using Gwei (10^9 Gwei = 1 ETH) as the base unit,\n//                          we can handle 1B-1 ETH (total supply: ~121M ETH)\n//                          999_999_999.000_000_000 ETH => 18 digits\n//  * arbitrary BTC amounts: 100M = 10^8 Satoshis = 1 BTC, 21M BTC = 2.1 * 10^7\n//                           hence can be at most 2.1 * 10^15 Satoshis\n//                           21_000_000.000_000_00 BTC => 16 digits\n//\n// By default, we're not using Solidity's built-in SafeMath (overflow and\n//  underflow protection) because it's expensive and we've done the numerics\n//  to ensure that all results (including intermediate results) will always\n//  stay within sensible bounds. Hence the pervasive use of unchecked blocks.\n\n// Some worst case analysis for calculateDepth and calculateUnknownBalance:\n//  (based on swim_invariant.py code)\n//\n//  Scenario 1: tokenCount=6, ampFactor=1, balances=[10^19] + [1]*5\n//   The most out of whack the pool can possibly be given our prerequisites.\n//   * calculateDepth\n//      calculateDepth requires 198 iterations to converge (so given that\n//       Python Decimals are slightly more accurate than uint256, we would\n//       expect about ~200 iterations for EVM code).\n//      At their largest, variable's bit consumption is:\n//       * reciprocalDecay: 301 bits\n//       * numerator:       366 bits (+10 bits for AMP_SHIFT)\n//       * denominator:     303 bits (+10 bits for AMP_SHIFT)\n//       * depth:            63 bits\n//      And this does not include AMP_SHIFT (which would another 10 bits to\n//       numerator and denominator).\n//      Therefore, fromAlign() will fail to undo the alignment and hence revert\n//       to prevent overflow.\n//      For completeness sake: The actual/final depth value would be 1246115.3\n//   * calculateUnknownBalance\n//      calculateUnknownBalance for the first balance (numerically the worst\n//       case) requires 49 iterations to converge and would even stay within\n//       the required bit limits:\n//       * reciprocalDecay:  89 bits\n//       * numeratorFixed:  127 bits\n//       * denominatorFixed: 21 bits\n//       * numerator:       210 bits\n//       * denominator:     106 bits\n//       * unknownBalance:  105 bits\n//\n//  Hence our our main concern is calculateDepth.\n//\n//  Scenario 2: tokenCount=6, ampFactor=1, balances=[10^19] + [10^8]*5\n//   In this scenario, the pool is still comically out of whack with a\n//   difference of 11 orders of magnitudes between the balances.\n//   * calculateDepth\n//      calculateDepth now requires 113 iterations to converge.\n//      Largest bit consumption\n//       * reciprocalDecay: 168 bits\n//       * numerator:       233 bits (+10 bits for AMP_SHIFT)\n//       * denominator:     171 bits (+10 bits for AMP_SHIFT)\n//       * depth:            63 bits\n//      So even after taking AMP_SHIFT into account, we can now conveniently\n//       accommodate all intermediate results.\n//      depth value: 645422243910.3\n//\n//  So in conclusion, our math implementation in here will work just fine\n//   in all realistic and even some very unrealistic scenarios and is more\n//   robust than any of the other AMM stablecurve implementations out there\n//   which overflow a lot earlier, while also maintaining accuracy and keeping\n//   gas costs low.\n\nfunction sum(Equalized[] memory arr) internal pure returns (uint ret) { unchecked {\n  for (uint i = 0; i < arr.length; ++i) {\n    ret += Equalized.unwrap(arr[i]);\n  }\n}}\n\nfunction absDiff(uint lhs, uint rhs) private pure returns(uint) { unchecked {\n  return lhs > rhs ? lhs-rhs : rhs-lhs;\n}}\n\nfunction min(uint lhs, uint rhs) private pure returns(uint) {\n  return lhs < rhs ? lhs : rhs;\n}\n\nfunction sqrt(uint radicand) private pure returns(uint) { unchecked {\n  if (radicand == 0) {\n      return 0;\n  }\n\n  uint msbHelper = radicand; //msb = most significant bit\n  uint root = 1;\n  //TODO check if this can't be put in a loop and have solc unroll the loop\n  if (msbHelper >> 128 > 0) {\n      msbHelper >>= 128;\n      root <<= 64;\n  }\n  if (msbHelper >> 64 > 0) {\n      msbHelper >>= 64;\n      root <<= 32;\n  }\n  if (msbHelper >> 32 > 0) {\n      msbHelper >>= 32;\n      root <<= 16;\n  }\n  if (msbHelper >> 16 > 0) {\n      msbHelper >>= 16;\n      root <<= 8;\n  }\n  if (msbHelper >> 8 > 0) {\n      msbHelper >>= 8;\n      root <<= 4;\n  }\n  if (msbHelper >> 4 > 0) {\n      msbHelper >>= 4;\n      root <<= 2;\n  }\n  if (msbHelper >> 2 > 0) {\n      root <<= 1;\n  }\n\n  //TODO also a prime candidate for loop unrolling\n  //     in fact, we probably know how many iterations we'll need at most (we can keep count!)\n  //     so we could just jump to the right number of leftover iterations...\n  root = (root + radicand / root) >> 1;\n  root = (root + radicand / root) >> 1;\n  root = (root + radicand / root) >> 1;\n  root = (root + radicand / root) >> 1;\n  root = (root + radicand / root) >> 1;\n  root = (root + radicand / root) >> 1;\n  root = (root + radicand / root) >> 1;\n\n  return min(root, radicand / root);\n}}\n\nfunction calculateUnknownBalance(\n  Equalized[] memory knownBalances,\n  uint depth,\n  uint32 ampFactor, //contains implicit shift by AMP_SHIFT bits\n  uint initialGuess\n) internal pure returns(Equalized) { unchecked {\n  //assumptions (already enforced elsewhere):\n  // 1 <= knownBalances.length <= 5\n  // ampFactor >= ONE_AMP_SHIFTED || (ampFactor == 0 && knownBalances.length == 1)\n  // depth > 0\n\n  uint unknownBalance;\n\n  if (ampFactor == 0) {\n    unknownBalance = depth * depth;\n    unknownBalance /= Equalized.unwrap(knownBalances[0]);\n    unknownBalance >>= 2; //= division by 4 but 2 gas cheaper\n  }\n  else {\n    uint tokenCount = knownBalances.length + 1;\n    (uint numeratorFixed, int shift) =\n      (((depth * depth) << AMP_SHIFT) / (ampFactor * tokenCount)).toAligned();\n    for (uint i = 0; i < knownBalances.length; ++i) {\n      //shifts up by at most 64 bits:\n      numeratorFixed *= depth;\n      //shifts down by at most 64 bits:\n      numeratorFixed /= Equalized.unwrap(knownBalances[i]) * tokenCount;\n      (numeratorFixed, shift) = numeratorFixed.keepAligned(shift);\n    }\n    numeratorFixed = numeratorFixed.fromAligned(shift);\n\n    uint denominatorFixed = sum(knownBalances) + ((depth << AMP_SHIFT) / ampFactor);\n\n    unknownBalance = initialGuess != 0 ? initialGuess : depth / 2;\n    uint previousUnknownBalance;\n    do {\n      previousUnknownBalance = unknownBalance;\n      //Even in the most extreme case, i.e. tokenCount = 6, ampFactor = 1,\n      // and balances perfectly extreme, the numerator will never exceed\n      // 210 bits, and the  denominator will\n      // and unknown balance will never exceed 105 bits, hence this can never overflow.\n      uint numerator = numeratorFixed + unknownBalance * unknownBalance;\n      uint denominator = (denominatorFixed + unknownBalance * 2) - depth;\n      //TODO should we use rounded div here? (via (num + denom/2)/denom)\n      unknownBalance = numerator / denominator;\n    } while (absDiff(previousUnknownBalance, unknownBalance) > 1);\n  }\n\n  //TODO test to ensure that this can never happen due to rounding\n  require(unknownBalance > 0);\n\n  //ensure that unknownBalance never blows up above the allowed maximum\n  if (unknownBalance > Equalize.MAX_AMOUNT)\n    revert Invariant_UnknownBalanceTooLarge(unknownBalance);\n  return Equalized.wrap(uint64(unknownBalance));\n}}\n\nfunction calculateDepth(\n  Equalized[] memory poolBalances,\n  uint32 ampFactor,\n  uint initialGuess\n) internal pure returns(uint depth) { unchecked {\n  //assumptions (already enforced elsewhere):\n  // 2 <= poolBalances.length <= 6\n  // ampFactor >= ONE_AMP_SHIFTED || (ampFactor == 0 && poolBalances.length == 2)\n  // 0 < poolBalances[i] < MAX_AMOUNT for all i\n\n  if (ampFactor == 0) {\n    depth = 4; //better precision by including the 4 in the subsequent sqrt\n    depth *= Equalized.unwrap(poolBalances[0]);\n    depth *= Equalized.unwrap(poolBalances[1]);\n    depth = sqrt(depth);\n    return depth;\n  }\n\n  uint tokenCount = poolBalances.length; //at most 3 bits\n  uint poolBalanceSum = sum(poolBalances); //at most 64 bits\n  uint numeratorFixedAmpUnits = poolBalanceSum * ampFactor; //at most 94 bits\n  uint denominatorFixedAmpUnits = ampFactor - ONE_AMP_SHIFTED; //at most 30 bits\n  depth = initialGuess != 0 ? initialGuess : poolBalanceSum; //at most 64 bits\n  uint previousDepth;\n  do {\n    previousDepth = depth;\n\n    (uint reciprocalDecay, int shift) = uint(1).toAligned();\n    for (uint i = 0; i < tokenCount; ++i) {\n      reciprocalDecay *= depth;\n      reciprocalDecay /= Equalized.unwrap(poolBalances[i]) * tokenCount;\n      (reciprocalDecay, shift) = reciprocalDecay.keepAligned(shift);\n    }\n\n    shift -= int(AMP_SHIFT);\n    uint tmpReciprocalDecay = reciprocalDecay * tokenCount;\n\n    (uint numRD, int numShift) = tmpReciprocalDecay.keepAligned(shift);\n    numRD *= depth;\n\n    uint denomRD = tmpReciprocalDecay + reciprocalDecay;\n    if (shift != numShift) //shift can only be smaller\n      denomRD <<= uint(numShift - shift); //now numRD and denomRD have the same shift\n\n    uint numerator;\n    uint denominator;\n    if (shift < 256-(64+31)) {\n      shift = -shift;\n      //instead of rightshifting numRD and denomRD (and sacrificing precision), we instead\n      // leftshift our *FixedAmpUnits values\n      numerator = numeratorFixedAmpUnits.fromAligned(shift) + numRD;\n      denominator = denominatorFixedAmpUnits.fromAligned(shift) + denomRD;\n    }\n    else {\n      numerator = numeratorFixedAmpUnits + numRD.fromAligned(shift);\n      denominator = denominatorFixedAmpUnits + denomRD.fromAligned(shift);\n    }\n\n    depth = numerator / denominator; //TODO rounded div?\n  } while (absDiff(previousDepth, depth) > 1);\n\n  //TODO test to ensure that this can never happen\n  require(depth > 0);\n\n  return depth;\n}}\n\nfunction marginalPrices(\n  Equalized[] memory poolBalances,\n  uint32 ampFactor,\n  Equalized lpSupply\n)\n  internal pure returns (uint[] memory) { unchecked {\n  uint tokenCount = poolBalances.length;\n  uint[] memory prices = new uint[](tokenCount);\n\n  if (ampFactor == 0) {\n    // with x := poolBalances[0], y := poolBalances[1]\n    // constant product invarant:   x*y = (depth/2)^2\n    // hence:                     depth = 2 * sqrt(x*y)\n    // derive by d/dx:       d depth/dx = 1/sqrt(x*y) * y\n    // => marginalPrice(x) = y / sqrt(x*y) = y / (2*depth)\n    // or when priced in lpSupply: marginalPrice(x) = y / (2*lpSupply)\n    prices[0] = Equalized.unwrap(poolBalances[1]) *\n      (MARGINAL_PRICE_MULTIPLIER/2) / Equalized.unwrap(lpSupply);\n    prices[1] = Equalized.unwrap(poolBalances[0]) *\n      (MARGINAL_PRICE_MULTIPLIER/2) / Equalized.unwrap(lpSupply);\n    return prices;\n  }\n\n  uint depth = Invariant.calculateDepth(poolBalances, ampFactor, 0);\n  (uint reciprocalDecay, int shift) = MARGINAL_PRICE_MULTIPLIER.toAligned();\n  for (uint i = 0; i < tokenCount; ++i) {\n    reciprocalDecay *= depth;\n    reciprocalDecay /= Equalized.unwrap(poolBalances[i]) * tokenCount;\n    (reciprocalDecay, shift) = reciprocalDecay.keepAligned(shift);\n  }\n  uint ampMinusOneShifted = (MARGINAL_PRICE_MULTIPLIER * (ampFactor - ONE_AMP_SHIFTED))\n    .fromAligned(-shift + int(AMP_SHIFT));\n  uint denominator = (ampMinusOneShifted + (tokenCount + 1) * reciprocalDecay) / 1e18;\n  uint depthTimesDecay = depth * reciprocalDecay;\n  uint numeratorAmp = (MARGINAL_PRICE_MULTIPLIER * ampFactor)\n    .fromAligned(-shift + int(AMP_SHIFT));\n  for (uint i = 0; i < tokenCount; ++i)\n    prices[i] = (numeratorAmp + depthTimesDecay/Equalized.unwrap(poolBalances[i])) / denominator;\n\n  return prices;\n}}\n\n}\n"
    },
    "contracts/Constants.sol": {
      "content": "//SPDX-License-Identifier: TODO\npragma solidity ^0.8.0;\n\nuint constant MAX_TOKEN_COUNT = 6;\nuint constant FEE_DECIMALS = 6; //enough to represent 100th of a bip\nuint constant FEE_MULTIPLIER = 10**FEE_DECIMALS;\n\n//Min and max equalizers are somewhat arbitrary, though shifting down by more than 18 decimals\n// will almost certainly be unintentional and shifting up by more than 4 digits will almost\n// certainly result in too small of a usable value range (only 18 digits in total!).\n//In general, a positive equalizer should be quite unlikely on an EVM chain.\n// (The main scenario where this seems somewhat likely at all are tokens that were Wormhole\n//  bridged from Solana that use a very low native number of decimals to begin with.)\nint8 constant MIN_EQUALIZER = -18;\nint8 constant MAX_EQUALIZER = 4;\n\n//amp factor for external representation\nuint constant AMP_DECIMALS = 3;\nuint constant AMP_MULTIPLIER = 10**AMP_DECIMALS;\n//we choose MAX_AMP_FACTOR so that MAX_AMP_FACTOR<<AMP_SHIFT requires 30 bits or less\nuint32 constant MAX_AMP_FACTOR = 10**6 * uint32(AMP_MULTIPLIER);\nuint constant MIN_AMP_ADJUSTMENT_WINDOW = 1 days;\nuint constant MAX_AMP_RELATIVE_ADJUSTMENT = 10;\n\n//amp factor for internal respresentation (shifting can be efficiently combined with other pool math)\nuint constant AMP_SHIFT = 10; //number of bits ampFactor is shifted to the left\nuint constant ONE_AMP_SHIFTED = 1 << AMP_SHIFT;\n\nuint constant MARGINAL_PRICE_DECIMALS = 18;\nuint constant MARGINAL_PRICE_MULTIPLIER = 10**MARGINAL_PRICE_DECIMALS;\n"
    },
    "contracts/Equalize.sol": {
      "content": "//SPDX-License-Identifier: TODO\npragma solidity ^0.8.0;\n\nimport \"./PoolErrors.sol\";\n\ntype Equalized is uint;\n\nlibrary Equalize {\n  uint public constant MAX_AMOUNT = (1<<61)-1;\n\n  function to(uint amount, int8 equalizer) internal pure returns (Equalized) {\n    if (amount == 0)\n      return Equalized.wrap(0);\n\n    uint equalized;\n    if (equalizer < 0) {\n      unchecked {equalized = amount / uint(10)**(uint(int(-equalizer)));}\n      if (equalized == 0)\n        revert Equalize_LosingAllPrecision(amount, equalizer);\n    }\n    else {\n      unchecked {equalized = uint(10)**(uint(int(equalizer)));}\n      equalized *= amount; //SafeMath!\n    }\n    if(equalized > MAX_AMOUNT)\n      revert Equalize_MaxAmountExceeded(amount, equalizer);\n    return Equalized.wrap(equalized);\n  }\n\n  function from(Equalized equalized, int8 equalizer) internal pure returns (uint) {\n    uint amount = Equalized.unwrap(equalized);\n    if (amount == 0)\n      return 0;\n\n    if (equalizer < 0) {\n      uint tmp;\n      unchecked {tmp = uint(10)**(uint(int(-equalizer)));}\n      amount *= tmp; //SafeMath!\n    }\n    else {\n      unchecked {amount /= uint(10)**(uint(int(equalizer)));}\n      if (amount == 0)\n        revert Equalize_LosingAllPrecision(Equalized.unwrap(equalized), equalizer);\n    }\n    return amount;\n  }\n}\n"
    },
    "contracts/PoolMath.sol": {
      "content": "//SPDX-License-Identifier: TODO\npragma solidity ^0.8.0;\n\nimport \"./PoolErrors.sol\";\nimport \"./Equalize.sol\";\nimport \"./Invariant.sol\";\n\n//The code in here is less readable than I'd like because I had to inline a couple of variables to\n// avoid solc's \"Stack too deep, try removing local variables\" error message, because apparently\n// solc demands that variables remain accessible on stack, even if\nlibrary PoolMath {\n\nstruct Pool {\n  uint8 tokenCount;\n  Equalized[] balances;\n  uint32 ampFactor;\n  uint32 totalFee;\n  uint32 governanceFee;\n  Equalized totalLpSupply;\n}\n\nfunction addRemove(\n  bool isAdd,\n  Equalized[] memory amounts,\n  Pool memory pool\n) internal pure returns (\n  Equalized userLpAmount,\n  Equalized governanceMintAmount\n) { unchecked {\n  uint initialDepth = Invariant.calculateDepth(pool.balances, pool.ampFactor, 0);\n  uint sumPoolBalances = 0;\n  uint sumUpdatedBalances = 0;\n  Equalized[] memory updatedBalances = new Equalized[](pool.tokenCount);\n  for (uint i = 0; i < pool.tokenCount; ++i) {\n    uint balance = Equalized.unwrap(pool.balances[i]);\n    uint amount = Equalized.unwrap(amounts[i]);\n    uint updatedBalance = isAdd ? balance + amount : balance - amount;\n    updatedBalances[i] = Equalized.wrap(updatedBalance);\n    sumPoolBalances += balance;\n    sumUpdatedBalances += updatedBalance;\n  }\n  uint updatedDepth = Invariant.calculateDepth(\n    updatedBalances,\n    pool.ampFactor,\n    initialDepth * sumUpdatedBalances / sumPoolBalances //initialGuess\n  );\n\n  if (pool.totalFee != 0) {\n    Equalized[] memory feeAdjustedBalances = new Equalized[](pool.tokenCount);\n    for (uint i = 0; i < pool.tokenCount; ++i) {\n      uint updatedBalance = Equalized.unwrap(updatedBalances[i]);\n      uint scaledBalance = //rounding?\n        Equalized.unwrap(pool.balances[i]) * sumUpdatedBalances / sumPoolBalances;\n      uint taxbase = isAdd\n        ? (updatedBalance > scaledBalance ? updatedBalance - scaledBalance : 0)\n        : (updatedBalance < scaledBalance ? scaledBalance - updatedBalance : 0);\n      //We calculate feeAmount = taxbase * (isAdd ?pool.totalFee : (1/(1-totalFee)-1))\n      // but in a way that correctly handles FEE_DECIMALS and is compatible with uint arithmetic.\n      uint feeAmount = isAdd //rounding?\n        ? taxbase *pool.totalFee / FEE_MULTIPLIER\n        : taxbase * FEE_MULTIPLIER / (FEE_MULTIPLIER - pool.totalFee) - taxbase;\n      if(updatedBalance <= feeAmount)\n        revert PoolMath_ImpossibleRemove();\n      uint feeAdjustedBalance = updatedBalance - feeAmount;\n      feeAdjustedBalances[i] = Equalized.wrap(feeAdjustedBalance);\n    }\n    uint feeAdjustedDepth =\n      Invariant.calculateDepth(feeAdjustedBalances,pool.ampFactor, updatedDepth);\n    userLpAmount = Equalized.wrap( //rounding?\n      Equalized.unwrap(pool.totalLpSupply) * (\n        isAdd ? feeAdjustedDepth - initialDepth : initialDepth - feeAdjustedDepth //userDepth\n      ) / initialDepth\n    );\n    uint totalFeeDepth = updatedDepth - feeAdjustedDepth;\n    uint governanceDepth = totalFeeDepth * pool.governanceFee / pool.totalFee; //rounding?\n    uint updatedLpSupply = isAdd\n      ? Equalized.unwrap(pool.totalLpSupply) + Equalized.unwrap(userLpAmount)\n      : Equalized.unwrap(pool.totalLpSupply) - Equalized.unwrap(userLpAmount);\n    governanceMintAmount = Equalized.wrap( //rounding?\n      governanceDepth * updatedLpSupply / (\n        (isAdd ? feeAdjustedDepth : updatedDepth) - governanceDepth //totalLpDepth\n      )\n    );\n  }\n  else\n    userLpAmount = Equalized.wrap( //rounding?\n      (isAdd ? updatedDepth - initialDepth : initialDepth - updatedDepth)\n      * Equalized.unwrap(pool.totalLpSupply) / initialDepth\n    );\n}}\n\nfunction swap(\n  bool isInput,\n  Equalized[] memory amounts,\n  uint8 index,\n  Pool memory pool\n) internal pure returns (\n  Equalized userTokenAmount,\n  Equalized governanceMintAmount\n) { unchecked {\n  uint initialDepth = Invariant.calculateDepth(pool.balances,pool.ampFactor, 0);\n  Equalized[] memory updatedBalances = new Equalized[](pool.tokenCount);\n  for (uint i = 0; i < pool.tokenCount; ++i) {\n    uint balance = Equalized.unwrap(pool.balances[i]);\n    uint amount = Equalized.unwrap(amounts[i]);\n    uint updatedBalance = isInput ? balance + amount : balance - amount;\n    updatedBalances[i] = Equalized.wrap(updatedBalance);\n  }\n  Equalized[] memory knownBalances = new Equalized[](pool.tokenCount-1);\n  if (isInput && pool.totalFee != 0) {\n    for (uint i = 0; i < knownBalances.length; ++i) {\n      uint j = i < index ? i : i+1;\n      uint amount = Equalized.unwrap(amounts[j]);\n      uint updatedBalance = Equalized.unwrap(updatedBalances[j]);\n      uint inputFeeAmount = amount * pool.totalFee / FEE_MULTIPLIER; //rounding?\n      uint knownBalance = updatedBalance - inputFeeAmount;\n      knownBalances[i] = Equalized.wrap(knownBalance);\n    }\n  }\n  else {\n    for (uint i = 0; i < knownBalances.length; ++i) {\n      uint j = i < index ? i : i+1;\n      knownBalances[i] = updatedBalances[j];\n    }\n  }\n  uint initialGuess = isInput ? Equalized.unwrap(pool.balances[index]) : 0;\n  uint unknownBalance = Equalized.unwrap(\n    Invariant.calculateUnknownBalance(knownBalances, initialDepth,pool.ampFactor, initialGuess)\n  );\n\n  uint _userTokenAmount;\n  if (isInput) {\n    _userTokenAmount = Equalized.unwrap(pool.balances[index]) - unknownBalance;\n    updatedBalances[index] =\n      Equalized.wrap(Equalized.unwrap(updatedBalances[index]) - _userTokenAmount);\n  }\n  else {\n    _userTokenAmount = unknownBalance - Equalized.unwrap(pool.balances[index]);\n    if (pool.totalFee != 0)\n      _userTokenAmount = //rounding?\n        _userTokenAmount * FEE_MULTIPLIER / (FEE_MULTIPLIER - pool.totalFee);\n    updatedBalances[index] =\n      Equalized.wrap(Equalized.unwrap(updatedBalances[index]) + _userTokenAmount);\n  }\n  userTokenAmount = Equalized.wrap(_userTokenAmount);\n\n  if (pool.totalFee != 0) {\n    uint finalDepth = Invariant.calculateDepth(pool.balances,pool.ampFactor, initialDepth);\n    uint totalFeeDepth = finalDepth - initialDepth;\n    uint governanceDepth = totalFeeDepth *pool.governanceFee /pool.totalFee; //rounding?\n    uint totalLpDepth = finalDepth - governanceDepth;\n    uint _totalLpSupply = Equalized.unwrap(pool.totalLpSupply);\n    uint _governanceMintAmount = governanceDepth * _totalLpSupply / totalLpDepth;\n    governanceMintAmount = Equalized.wrap(_governanceMintAmount);\n  }\n}}\n\nfunction removeExactBurn(\n  Equalized burnAmount,\n  uint8 outputIndex,\n  Pool memory pool\n) internal pure returns (\n  Equalized outputAmount,\n  Equalized governanceMintAmount\n) { unchecked {\n  //RemoveExactBurnCache memory cache = RemoveExactBurnCache(0, 0, 0);\n  uint updatedLpSupply = Equalized.unwrap(pool.totalLpSupply) - Equalized.unwrap(burnAmount);\n  uint updatedDepth = //rounding?\n    Invariant.calculateDepth(pool.balances, pool.ampFactor, 0) //initialDepth\n    * updatedLpSupply / Equalized.unwrap(pool.totalLpSupply);\n  Equalized[] memory knownBalances = new Equalized[](pool.tokenCount-1);\n  for (uint i = 0; i < knownBalances.length; ++i) {\n    uint j = i < outputIndex ? i : i+1;\n    knownBalances[i] = pool.balances[j];\n  }\n  uint baseAmount = Equalized.unwrap(pool.balances[outputIndex]) - Equalized.unwrap(\n    Invariant.calculateUnknownBalance(\n      knownBalances,\n      updatedDepth,\n      pool.ampFactor,\n      Equalized.unwrap(pool.balances[outputIndex])\n    ));\n  if (pool.totalFee != 0) {\n    uint sumPoolBalances = Invariant.sum(pool.balances);\n    //64 bits or less:\n    uint taxableFraction = ( //rounding?\n      (sumPoolBalances - Equalized.unwrap(pool.balances[outputIndex]))<<64\n    ) / sumPoolBalances;\n    //totalFee is less than FEE_MULTIPLIER/2, hence 1<<64 is an upper bound for the quotient,\n    // and therefore overall fee is < 1<<64, i.e. fits in 64 bits or less:\n    uint fee = (FEE_MULTIPLIER<<64) / (FEE_MULTIPLIER - pool.totalFee) - (1<<64); //rounding?\n    outputAmount = Equalized.wrap(\n      baseAmount - (\n        ( //(64 bits * 64 bits) / (64 bits + (64 bits * 64 bits)>>64) = 128 / 64 = 64 bits or less:\n          ((baseAmount * taxableFraction) / ((1<<64) + ((taxableFraction * fee)>>64)))\n          * fee\n        ) >> 64\n      )\n    );\n    //In the next line we're assigning to a function parameter (bad) that's a reference too\n    // (way worse still). Otoh, we're not using pool.balances for anything else, neither inside\n    // this function, nor within the larger context of the entire contract invocation. Hence,\n    // copying the entire array and wasting a bunch of gas in the process, just to neurotically\n    // and autistically avoid a code smell is even less palatable. So here goes...\n    pool.balances[outputIndex] = Equalized.wrap(\n      Equalized.unwrap(pool.balances[outputIndex]) - Equalized.unwrap(outputAmount)\n    );\n    uint totalFeeDepth =\n      Invariant.calculateDepth(pool.balances, pool.ampFactor, updatedDepth) //finalDepth\n      - updatedDepth;\n    uint governanceDepth = totalFeeDepth * pool.governanceFee / pool.totalFee;\n    governanceMintAmount = Equalized.wrap(\n      governanceDepth * updatedLpSupply / (\n        updatedDepth + totalFeeDepth - governanceDepth //lpDepth\n      )\n    );\n  }\n  else\n    outputAmount = Equalized.wrap(baseAmount);\n}}\n\n}\n"
    },
    "contracts/Pool.sol": {
      "content": "//SPDX-License-Identifier: TODO\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/proxy/Clones.sol\";\n//import \"@openzeppelin/contracts/proxy/utils/Initializable.sol\";\n//We aren't using the contracts-upgradable version of UUPSUpgradable because it doesn't\n// have a constructor anyway and we don't want to pointlessly gunk up the storage\n// with empty uint blocks of size 50 (as the upgradable versions of the contracts do).\nimport \"@openzeppelin/contracts/proxy/utils/UUPSUpgradeable.sol\";\n\nimport \"./interfaces/IPool.sol\";\nimport \"./interfaces/IRouting.sol\";\n\nimport \"./LpToken.sol\";\nimport \"./Constants.sol\";\nimport \"./PoolErrors.sol\";\nimport \"./Invariant.sol\";\nimport \"./PoolMath.sol\";\n\n//We'll use uint32 for timestamps. 2^32 seconds ~= 136 years, i.e. it will last us until the early\n// 22nd century... so we ought to be fine.\n\ncontract Pool is IPool, UUPSUpgradeable, Initializable {\n\n  struct TokenWithEqualizer { //uses 22/32 bytes of its slot\n    address addr;\n    int8 equalizer; //it's cheaper to (densely) store the equalizers than the blown up values\n  }\n\n  using SafeERC20 for IERC20;\n\n  IRouting constant ROUTING_CONTRACT = IRouting(address(0x0));\n\n  //slot (26/32 bytes used)\n  uint8  public /*immutable*/ tokenCount;\n  bool   public paused;\n  uint32 public totalFee;\n  uint32 public governanceFee;\n  uint32 private ampInitialValue; //in internal, i.e. AMP_SHIFTED representation\n  uint32 public ampInitialTimestamp;\n  uint32 private ampTargetValue; //in internal, i.e. AMP_SHIFTED representation\n  uint32 public ampTargetTimestamp;\n\n  //slot\n  TokenWithEqualizer public /*immutable*/ lpTokenData;\n\n  //MAX_TOKEN_COUNT slots (save gas by not having to keccak)\n  TokenWithEqualizer[MAX_TOKEN_COUNT] public /*immutable*/ poolTokensData;\n\n  //slot\n  address public governance;\n\n  //slot\n  address public governanceFeeRecipient;\n\n  function initialize(\n    string memory lpTokenName,\n    string memory lpTokenSymbol,\n    address lpTokenAddress,\n    int8 lpTokenEqualizer,\n    address[] memory poolTokenAddresses,\n    int8[] memory poolTokenEqualizers,\n    uint32 ampFactor,\n    uint32 lpFee,\n    uint32 _governanceFee,\n    address _governanceFeeRecipient\n  ) public initializer {\n    LpToken lpToken = LpToken(lpTokenAddress);\n    if (!lpToken.initialize(lpTokenName, lpTokenSymbol))\n      revert Pool_LpTokenInitializationFailed();\n    lpTokenData.addr = lpTokenAddress;\n    lpTokenData.equalizer = lpTokenEqualizer;\n\n    uint _tokenCount = poolTokenAddresses.length;\n    if (_tokenCount > MAX_TOKEN_COUNT)\n      revert Pool_MaxTokenCountExceeded(uint8(_tokenCount), uint8(MAX_TOKEN_COUNT));\n    if (poolTokenEqualizers.length != _tokenCount)\n      revert Pool_TokenEqualizerCountMismatch(\n        uint8(poolTokenEqualizers.length),\n        uint8(_tokenCount)\n      );\n    tokenCount = uint8(_tokenCount);\n\n    //enforce that swimUSD is always the first token\n    //TODO\n    //if (poolTokenAddresses[0] != ROUTING_CONTRACT.swimUsdAddress())\n    //  revert Pool_FirstTokenNotSwimUSD(poolTokenAddresses[0], ROUTING_CONTRACT.swimUsdAddress());\n    for (uint i = 0; i < _tokenCount; ++i) {\n      //TODO do we want any form of checking here? (e.g. duplicates)\n      poolTokensData[i].addr = poolTokenAddresses[i];\n      if (poolTokenEqualizers[i] < MIN_EQUALIZER)\n        revert Pool_TokenEqualizerTooSmall(poolTokenEqualizers[i], MIN_EQUALIZER);\n      if (poolTokenEqualizers[i] > MAX_EQUALIZER)\n        revert Pool_TokenEqualizerTooLarge(poolTokenEqualizers[i], MAX_EQUALIZER);\n      poolTokensData[i].equalizer = poolTokenEqualizers[i];\n    }\n\n    if (ampFactor == 0) {\n      //ampFactor == 0 => constant product (only supported for 2 tokens)\n      if (_tokenCount != 2)\n        revert Pool_ConstantProductNotSupportedForTokenCount(uint8(_tokenCount));\n    }\n    else\n      checkAmpRange(ampFactor);\n\n    ampInitialValue = 0;\n    ampInitialTimestamp = 0;\n    ampTargetValue = toInternalAmpValue(ampFactor);\n    ampTargetTimestamp = 0;\n\n    governanceFeeRecipient = _governanceFeeRecipient;\n    _setFees(lpFee, _governanceFee);\n    paused = false;\n    governance = msg.sender;\n  }\n\n  modifier notPaused {\n    if(paused)\n      revert Pool_IsPaused();\n    _;\n  }\n\n  modifier onlyGovernance {\n    if (msg.sender != governance)\n      revert Pool_GovernanceOnly();\n    _;\n  }\n\n  function getState() external view returns(PoolState memory) {\n    uint _tokenCount = tokenCount;\n    PoolState memory state = PoolState(\n      paused,\n      new TokenBalance[](_tokenCount),\n      TokenBalance(lpTokenData.addr, LpToken(lpTokenData.addr).totalSupply()),\n      Decimal(toExternalAmpValue(getAmpFactor()), uint8(AMP_DECIMALS)),\n      Decimal(totalFee-governanceFee, uint8(FEE_DECIMALS)),\n      Decimal(governanceFee, uint8(FEE_DECIMALS))\n    );\n\n    for (uint i = 0; i < _tokenCount; ++i) {\n      state.balances[i] = TokenBalance(\n        poolTokensData[i].addr,\n        IERC20(poolTokensData[i].addr).balanceOf(address(this))\n      );\n    }\n\n    return state;\n  }\n\n  //calculate marginal prices measured in lp tokens\n  // so marginally, removing 1 lp token will give you marginalPrice[i] i-tokens\n  //returned in fixed point representation using 18 decimals (see MARGINAL_PRICES_DECIMALS)\n  // so 1 = 1e18, 0.5 = 5e17, and so on\n  function getMarginalPrices() external view returns (uint[] memory) {\n    return Invariant.marginalPrices(\n      getEqualizedPoolBalances(tokenCount),\n      getAmpFactor(),\n      Equalize.to(LpToken(lpTokenData.addr).totalSupply(), lpTokenData.equalizer)\n    );\n  }\n\n  // ----------------------------- DEFI LIQUIDITY -----------------------------\n\n  //always available, even when paused!\n  //maximally robust and conservative implementation\n  function removeUniform(uint burnAmount, uint[] memory minimumOutputAmounts)\n    external returns(uint[] memory outputAmounts) {\n    uint _tokenCount = tokenCount;\n    LpToken lpToken = LpToken(lpTokenData.addr);\n    uint totalLpSupply = lpToken.totalSupply();\n\n    lpToken.burnFrom(msg.sender, burnAmount);\n    outputAmounts = new uint[](_tokenCount);\n\n    for (uint i = 0; i < _tokenCount; ++i) {\n      IERC20 poolToken = IERC20(poolTokensData[i].addr);\n      uint poolBalance = poolToken.balanceOf(address(this));\n      //The mulDiv in the next line can theoretically have a phantom overflow (burn amount is\n      // always less than totalLpSupply, so a true overflow is impossible). However, for this\n      // to happen, both poolBalance and burnAmount have to exceed 10^38 which is realistically\n      // impossible, even after accounting for the standard 18 decimals.\n      uint outputAmount = poolBalance * burnAmount / totalLpSupply; //SafeMath!\n      if (outputAmount < minimumOutputAmounts[i])\n        revert Pool_SlippageExceeded(address(poolToken), outputAmount, minimumOutputAmounts[i]);\n      poolToken.safeTransfer(msg.sender, outputAmount);\n      outputAmounts[i] = outputAmount;\n    }\n  }\n\n  function add(\n    uint[] memory inputAmounts,\n    uint minimumMintAmount\n  ) external notPaused returns(uint mintAmount) { unchecked {\n    (uint _tokenCount, LpToken lpToken, int8 lpEqualizer, PoolMath.Pool memory pool) = defiParas();\n\n    Equalized[] memory eInputAmounts = equalizeAmounts(inputAmounts, _tokenCount);\n    Equalized eMintAmount;\n    if (Equalized.unwrap(pool.totalLpSupply) == 0) {\n      for (uint i = 0; i < _tokenCount; ++i)\n        if (inputAmounts[i] == 0)\n          revert Pool_InitialAddMustIncludeAllTokens(uint8(i));\n      uint depth = Invariant.calculateDepth(eInputAmounts, pool.ampFactor, 0);\n      //In all other circumstances, the amount of LP tokens minted or burned is\n      // proportional to the generated/consumed depth, where the current depth\n      // of the pool represents the the total LP supply.\n      //In case the pool is empty however, this correspondence isn't meaningful\n      // yet and hence needs to be established.\n      //Technically speaking, wraping depth in Equalized here is a bit of\n      // an abuse because Equalizeds are supposed to only take up to 61\n      // bits while depth can take up to 64 bits.\n      eMintAmount = Equalized.wrap(depth);\n    }\n    else {\n      Equalized eGovernanceMintAmount;\n      (eMintAmount, eGovernanceMintAmount) = PoolMath.addRemove(true, eInputAmounts, pool);\n      mintGovernanceFee(eGovernanceMintAmount, lpToken, lpEqualizer);\n    }\n    mintAmount = Equalize.from(eMintAmount, lpEqualizer);\n    if (mintAmount < minimumMintAmount)\n      revert Pool_SlippageExceeded(address(lpToken), mintAmount, minimumMintAmount);\n    for (uint i = 0; i < _tokenCount; ++i)\n      safeTransferFrom(inputAmounts[i], i);\n    lpToken.mint(msg.sender, mintAmount);\n  }}\n\n  function removeExactOutput(\n    uint[] memory outputAmounts,\n    uint maximumBurnAmount\n  ) external notPaused returns(uint burnAmount) { unchecked {\n    (uint _tokenCount, LpToken lpToken, int8 lpEqualizer, PoolMath.Pool memory pool) = defiParas();\n\n    Equalized[] memory eOutputAmounts = equalizeAmounts(outputAmounts, _tokenCount);\n    //We could also immediately transfer, but that would be a lot more gas inefficient for\n    // transactions that fail due to slippage.\n    for (uint i = 0; i < _tokenCount;  ++i)\n      //strictly speaking there is a case where >= is fine, namely if all pool balances are removed\n      // at the same time and we don't run into any rounding errors due to equalization...)\n      if (Equalized.unwrap(eOutputAmounts[i]) >= Equalized.unwrap(pool.balances[i]))\n        revert Pool_AmountExceedsSupply(\n          poolTokensData[i].addr,\n          outputAmounts[i],\n          Equalize.from(pool.balances[i], poolTokensData[i].equalizer)\n        );\n\n    (Equalized eBurnAmount, Equalized eGovernanceMintAmount) =\n     PoolMath.addRemove(false, eOutputAmounts, pool);\n\n    burnAmount = Equalize.from(eBurnAmount, lpEqualizer);\n    if (burnAmount > maximumBurnAmount)\n      revert Pool_SlippageExceeded(address(lpToken), burnAmount, maximumBurnAmount);\n    lpToken.burnFrom(msg.sender, burnAmount);\n    for (uint i = 0; i < _tokenCount; ++i)\n      safeTransfer(outputAmounts[i], i);\n    mintGovernanceFee(eGovernanceMintAmount, lpToken, lpEqualizer);\n  }}\n\n  function removeExactBurn(\n    uint burnAmount,\n    uint8 outputTokenIndex,\n    uint minimumOutputAmount\n  ) external notPaused returns(uint outputAmount) {\n    (uint _tokenCount, LpToken lpToken, int8 lpEqualizer, PoolMath.Pool memory pool) = defiParas();\n\n    checkIndex(outputTokenIndex, _tokenCount);\n    Equalized eBurnAmount = Equalize.to(burnAmount, lpEqualizer);\n    //We could also immediately transfer, but that would be a lot more gas inefficient for\n    // transactions that fail due to slippage.\n    if (Equalized.unwrap(eBurnAmount) >= Equalized.unwrap(pool.totalLpSupply))\n      revert Pool_AmountExceedsSupply(\n        address(lpToken),\n        burnAmount,\n        Equalize.from(pool.totalLpSupply, lpEqualizer)\n      );\n\n    (Equalized eOutputAmount, Equalized eGovernanceMintAmount) =\n      PoolMath.removeExactBurn(eBurnAmount, outputTokenIndex, pool);\n\n    outputAmount = Equalize.from(eOutputAmount, poolTokensData[outputTokenIndex].equalizer);\n    if (outputAmount < minimumOutputAmount)\n      revert Pool_SlippageExceeded(\n        poolTokensData[outputTokenIndex].addr,\n        outputAmount,\n        minimumOutputAmount\n      );\n    lpToken.burnFrom(msg.sender, burnAmount);\n    safeTransfer(outputAmount, outputTokenIndex);\n    mintGovernanceFee(eGovernanceMintAmount, lpToken, lpEqualizer);\n  }\n\n  // ------------------------------- DEFI SWAP --------------------------------\n\n  //called by swap(), hence public and not restricted to external\n  function swapExactInput(\n    uint[] memory inputAmounts,\n    uint8 outputTokenIndex,\n    uint minimumOutputAmount\n  ) public notPaused returns(uint outputAmount) { unchecked {\n    (uint _tokenCount, LpToken lpToken, int8 lpEqualizer, PoolMath.Pool memory pool) = defiParas();\n\n    checkIndex(outputTokenIndex, _tokenCount);\n    if (inputAmounts[outputTokenIndex] != 0)\n      revert Pool_RequestedTokenAmountNotZero(outputTokenIndex, inputAmounts[outputTokenIndex]);\n    Equalized[] memory eInputAmounts = equalizeAmounts(inputAmounts, _tokenCount);\n\n    (Equalized eOutputAmount, Equalized eGovernanceMintAmount) =\n      PoolMath.swap(true, eInputAmounts, outputTokenIndex, pool);\n\n    outputAmount = Equalize.from(eOutputAmount, poolTokensData[outputTokenIndex].equalizer);\n    if (outputAmount < minimumOutputAmount)\n      revert Pool_SlippageExceeded(\n        poolTokensData[outputTokenIndex].addr,\n        outputAmount,\n        minimumOutputAmount\n      );\n    for (uint i = 0; i < _tokenCount; ++i)\n      safeTransferFrom(inputAmounts[i], i);\n    safeTransfer(outputAmount, outputTokenIndex);\n    mintGovernanceFee(eGovernanceMintAmount, lpToken, lpEqualizer);\n  }}\n\n  function swapExactOutput(\n    uint maximumInputAmount,\n    uint8 inputTokenIndex,\n    uint[] memory outputAmounts\n  ) external notPaused returns(uint inputAmount) { unchecked {\n    (uint _tokenCount, LpToken lpToken, int8 lpEqualizer, PoolMath.Pool memory pool) = defiParas();\n\n    checkIndex(inputTokenIndex, _tokenCount);\n    if (outputAmounts[inputTokenIndex] != 0)\n      revert Pool_RequestedTokenAmountNotZero(inputTokenIndex, outputAmounts[inputTokenIndex]);\n    Equalized[] memory eOutputAmounts = equalizeAmounts(outputAmounts, _tokenCount);\n    //We could also immediately transfer, but that would be a lot more gas inefficient for\n    // transactions that fail due to slippage.\n    for (uint i = 0; i < _tokenCount; ++i)\n      if (Equalized.unwrap(eOutputAmounts[i]) >= Equalized.unwrap(pool.balances[i]))\n        revert Pool_AmountExceedsSupply(\n          poolTokensData[i].addr,\n          outputAmounts[i],\n          Equalize.from(pool.balances[i], poolTokensData[i].equalizer)\n        );\n\n    (Equalized eInputAmount, Equalized eGovernanceMintAmount) =\n      PoolMath.swap(false, eOutputAmounts, inputTokenIndex, pool);\n\n    inputAmount = Equalize.from(eInputAmount, poolTokensData[inputTokenIndex].equalizer);\n    if (inputAmount > maximumInputAmount)\n      revert Pool_SlippageExceeded(\n        poolTokensData[inputTokenIndex].addr,\n        inputAmount,\n        maximumInputAmount\n      );\n    safeTransferFrom(inputAmount, inputTokenIndex);\n    for (uint i = 0; i < _tokenCount; ++i)\n      safeTransfer(outputAmounts[i], i);\n    mintGovernanceFee(eGovernanceMintAmount, lpToken, lpEqualizer);\n  }}\n\n  //allows swapping with the pool without having to know/look up its tokenCount\n  function swap(\n    uint inputAmount,\n    uint8 inputTokenIndex,\n    uint8 outputTokenIndex,\n    uint minimumOutputAmount\n  ) external notPaused returns(uint outputAmount) {\n    uint _tokenCount = tokenCount;\n    checkIndex(inputTokenIndex, _tokenCount);\n\n    //Solidity guarantees default initialization, even if memory was previously dirty, so we don't\n    // have to zero initialize ourselves.\n    uint[] memory inputAmounts = new uint[](_tokenCount);\n    inputAmounts[inputTokenIndex] = inputAmount;\n\n    return swapExactInput(inputAmounts, outputTokenIndex, minimumOutputAmount);\n  }\n\n  // ------------------------------- GOVERNANCE -------------------------------\n\n  function setFees(uint32 lpFee, uint32 _governanceFee) external onlyGovernance {\n    _setFees(lpFee, _governanceFee);\n  }\n\n  function adjustAmpFactor(uint32 targetValue, uint32 targetTimestamp) external onlyGovernance {\n    checkAmpRange(targetValue);\n    uint _targetTimestamp = uint(targetTimestamp);\n    uint minimumTargetTimestamp = block.timestamp + MIN_AMP_ADJUSTMENT_WINDOW;\n    if (_targetTimestamp < minimumTargetTimestamp)\n      revert Pool_AmpFactorTargetTimestampTooSmall(targetTimestamp, uint32(minimumTargetTimestamp));\n    uint currentAmpFactor = uint(getAmpFactor());\n    if (currentAmpFactor == 0)\n      revert Pool_AmpFactorIsFixedForConstantProductPools();\n    uint _ampTargetValue = uint(toInternalAmpValue(targetValue));\n\n    if (currentAmpFactor <= _ampTargetValue) {\n      uint threshold = currentAmpFactor * MAX_AMP_RELATIVE_ADJUSTMENT;\n      if (_ampTargetValue > threshold)\n        revert Pool_AmpFactorRelativeAdjustmentTooLarge(\n          toExternalAmpValue(uint32(currentAmpFactor)),\n          targetValue,\n          toExternalAmpValue(uint32(threshold))\n        );\n    }\n    else {\n      uint threshold = _ampTargetValue * MAX_AMP_RELATIVE_ADJUSTMENT;\n      if (_ampTargetValue < threshold)\n        revert Pool_AmpFactorRelativeAdjustmentTooLarge(\n          toExternalAmpValue(uint32(currentAmpFactor)),\n          targetValue,\n          toExternalAmpValue(uint32(threshold))\n        );\n    }\n\n    ampInitialValue = uint32(block.timestamp);\n    ampInitialTimestamp = uint32(currentAmpFactor);\n    ampTargetValue = uint32(_ampTargetValue);\n    ampTargetTimestamp = targetTimestamp;\n  }\n\n  function setPaused(bool _paused) external onlyGovernance {\n    paused = _paused;\n    //emit event\n  }\n\n  function transferGovernance(address _governance) external onlyGovernance {\n    governance = _governance;\n    //emit event\n  }\n\n  function changeGovernanceFeeRecipient(address _governanceFeeRecipient) external onlyGovernance {\n    if (governanceFee != 0 && _governanceFeeRecipient == address(0))\n      revert Pool_NonZeroGovernanceFeeButNoRecipient();\n    governanceFeeRecipient = _governanceFeeRecipient;\n    //emit event\n  }\n\n  //intentionally empty (we only want the onlyGovernance modifier \"side-effect\")\n  function _authorizeUpgrade(address) internal override onlyGovernance {}\n\n  function upgradeLpToken(address newImplementation) external onlyGovernance {\n    LpToken(lpTokenData.addr).upgradeTo(newImplementation);\n  }\n\n  function upgradeLpToken(address newImplementation, bytes memory data) external onlyGovernance {\n    LpToken(lpTokenData.addr).upgradeToAndCall(newImplementation, data);\n  }\n\n  // -------------------------------- INTERNAL --------------------------------\n\n  function _setFees(uint32 lpFee, uint32 _governanceFee) internal {\n    uint32 _totalFee = lpFee + _governanceFee; //SafeMath!\n    //We're limiting total fees to less than 50 % because:\n    // 1) Anything even close to approaching this is already entirely insane.\n    // 2) To avoid theoretical overflow/underflow issues when calculating the inverse fee,\n    //    of 1/(1-fee)-1 would exceed 100 % if fee were to exceeds 50 %.\n    if (_totalFee >= FEE_MULTIPLIER/2)\n      revert Pool_TotalFeeTooLarge(_totalFee, uint32(FEE_MULTIPLIER/2 - 1));\n    if (_governanceFee != 0 && governanceFeeRecipient == address(0))\n      revert Pool_NonZeroGovernanceFeeButNoRecipient();\n    totalFee = _totalFee;\n    governanceFee = _governanceFee;\n  }\n\n  function safeTransferFrom(uint inputAmount, uint tokenIndex) internal {\n    if (inputAmount > 0) {\n      IERC20 poolToken = IERC20(poolTokensData[tokenIndex].addr);\n      poolToken.safeTransferFrom(msg.sender, address(this), inputAmount);\n    }\n  }\n\n  function safeTransfer(uint outputAmount, uint tokenIndex) internal {\n    if (outputAmount > 0) {\n      IERC20 poolToken = IERC20(poolTokensData[tokenIndex].addr);\n      poolToken.safeTransfer(msg.sender, outputAmount);\n    }\n  }\n\n  function mintGovernanceFee(\n    Equalized eGovernanceMintAmount,\n    LpToken lpToken,\n    int8 lpEqualizer\n  ) internal {\n    if (Equalized.unwrap(eGovernanceMintAmount) != 0) {\n      uint governanceLpFee = Equalize.from(eGovernanceMintAmount, lpEqualizer);\n      lpToken.mint(governanceFeeRecipient, governanceLpFee);\n    }\n  }\n\n  // ------------------------------ INTERNAL VIEW -----------------------------\n\n  function equalizeAmounts(uint[] memory amounts, uint _tokenCount)\n    internal view returns(Equalized[] memory equalized) {\n    if (amounts.length != _tokenCount)\n      revert Pool_AmountCountMismatch(uint8(amounts.length), uint8(_tokenCount));\n    equalized = new Equalized[](_tokenCount);\n    for (uint i = 0; i < _tokenCount; ++i)\n      equalized[i] = Equalize.to(amounts[i], poolTokensData[i].equalizer);\n  }\n\n  //function for cutting down on boiler plate code\n  // (and reading storage variables only once to optimize gas costs)\n  function defiParas() internal view returns(\n    uint _tokenCount, //gas optimization\n    LpToken lpToken,\n    int8 lpEqualizer, //gas optimization\n    PoolMath.Pool memory pool\n  ) { unchecked {\n    _tokenCount = tokenCount;\n    lpToken = LpToken(lpTokenData.addr);\n    lpEqualizer = lpTokenData.equalizer;\n    pool = PoolMath.Pool(\n      uint8(_tokenCount),\n      getEqualizedPoolBalances(_tokenCount),\n      getAmpFactor(),\n      totalFee,\n      governanceFee,\n      Equalize.to(lpToken.totalSupply(), lpEqualizer)\n    );\n  }}\n\n  function getEqualizedPoolBalances(uint _tokenCount)\n    internal view returns(Equalized[] memory poolBalances) { unchecked {\n    poolBalances = new Equalized[](_tokenCount);\n    for (uint i = 0; i < _tokenCount; ++i) {\n      uint balance = IERC20(poolTokensData[i].addr).balanceOf(address(this));\n      poolBalances[i] = Equalize.to(balance, poolTokensData[i].equalizer);\n    }\n  }}\n\n  function getAmpFactor() internal view returns(uint32 ampFactor) { unchecked {\n    int currentTimestamp = int(block.timestamp);\n    int _ampTargetTimestamp = int(uint(ampTargetTimestamp));\n    if (currentTimestamp < _ampTargetTimestamp) {\n      int _ampInitialTimestamp = int(uint(ampInitialTimestamp));\n      int _ampInitialValue = int(uint(ampInitialValue));\n      int _ampTargetValue = int(uint(ampTargetValue));\n      int totalValueDifference = _ampTargetValue - _ampInitialValue;\n      int timeSinceInitial = currentTimestamp - _ampInitialTimestamp;\n      int totalAdjustmentTime = _ampTargetTimestamp - _ampInitialTimestamp;\n      int delta = totalValueDifference * timeSinceInitial / totalAdjustmentTime;\n      ampFactor = uint32(uint(_ampInitialValue + delta));\n    }\n    else\n      ampFactor = ampTargetValue;\n  }}\n\n  // ------------------------------ INTERNAL PURE -----------------------------\n\n  function checkIndex(uint8 index, uint _tokenCount) internal pure {\n    if (index >= _tokenCount)\n      revert Pool_InvalidTokenIndex(index, uint8 (_tokenCount));\n  }\n\n  function checkAmpRange(uint32 ampFactor) internal pure {\n    if (ampFactor > MAX_AMP_FACTOR)\n      revert Pool_AmpFactorTooLarge(ampFactor, MAX_AMP_FACTOR);\n    if (ampFactor < AMP_MULTIPLIER)\n      revert Pool_AmpFactorTooSmall(ampFactor, uint32(AMP_MULTIPLIER));\n  }\n\n  function toInternalAmpValue(uint32 ampFactor) internal pure returns (uint32) { unchecked {\n    return uint32((uint(ampFactor) << AMP_SHIFT) / AMP_MULTIPLIER);\n  }}\n\n  function toExternalAmpValue(uint32 ampFactor) internal pure returns (uint32) { unchecked {\n    return uint32((uint(ampFactor) * AMP_MULTIPLIER) >> AMP_SHIFT);\n  }}\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\nimport \"../extensions/draft-IERC20Permit.sol\";\nimport \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    function safeTransfer(\n        IERC20 token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20 token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    function safePermit(\n        IERC20Permit token,\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal {\n        uint256 nonceBefore = token.nonces(owner);\n        token.permit(owner, spender, value, deadline, v, r, s);\n        uint256 nonceAfter = token.nonces(owner);\n        require(nonceAfter == nonceBefore + 1, \"SafeERC20: permit did not succeed\");\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/proxy/Clones.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/Clones.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev https://eips.ethereum.org/EIPS/eip-1167[EIP 1167] is a standard for\n * deploying minimal proxy contracts, also known as \"clones\".\n *\n * > To simply and cheaply clone contract functionality in an immutable way, this standard specifies\n * > a minimal bytecode implementation that delegates all calls to a known, fixed address.\n *\n * The library includes functions to deploy a proxy using either `create` (traditional deployment) or `create2`\n * (salted deterministic deployment). It also includes functions to predict the addresses of clones deployed using the\n * deterministic method.\n *\n * _Available since v3.4._\n */\nlibrary Clones {\n    /**\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\n     *\n     * This function uses the create opcode, which should never revert.\n     */\n    function clone(address implementation) internal returns (address instance) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            let ptr := mload(0x40)\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\n            instance := create(0, ptr, 0x37)\n        }\n        require(instance != address(0), \"ERC1167: create failed\");\n    }\n\n    /**\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\n     *\n     * This function uses the create2 opcode and a `salt` to deterministically deploy\n     * the clone. Using the same `implementation` and `salt` multiple time will revert, since\n     * the clones cannot be deployed twice at the same address.\n     */\n    function cloneDeterministic(address implementation, bytes32 salt) internal returns (address instance) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            let ptr := mload(0x40)\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\n            instance := create2(0, ptr, 0x37, salt)\n        }\n        require(instance != address(0), \"ERC1167: create2 failed\");\n    }\n\n    /**\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\n     */\n    function predictDeterministicAddress(\n        address implementation,\n        bytes32 salt,\n        address deployer\n    ) internal pure returns (address predicted) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            let ptr := mload(0x40)\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf3ff00000000000000000000000000000000)\n            mstore(add(ptr, 0x38), shl(0x60, deployer))\n            mstore(add(ptr, 0x4c), salt)\n            mstore(add(ptr, 0x6c), keccak256(ptr, 0x37))\n            predicted := keccak256(add(ptr, 0x37), 0x55)\n        }\n    }\n\n    /**\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\n     */\n    function predictDeterministicAddress(address implementation, bytes32 salt)\n        internal\n        view\n        returns (address predicted)\n    {\n        return predictDeterministicAddress(implementation, salt, address(this));\n    }\n}\n"
    },
    "@openzeppelin/contracts/proxy/utils/UUPSUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/utils/UUPSUpgradeable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../interfaces/draft-IERC1822.sol\";\nimport \"../ERC1967/ERC1967Upgrade.sol\";\n\n/**\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\n *\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\n * `UUPSUpgradeable` with a custom implementation of upgrades.\n *\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\n *\n * _Available since v4.1._\n */\nabstract contract UUPSUpgradeable is IERC1822Proxiable, ERC1967Upgrade {\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\n    address private immutable __self = address(this);\n\n    /**\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\n     * fail.\n     */\n    modifier onlyProxy() {\n        require(address(this) != __self, \"Function must be called through delegatecall\");\n        require(_getImplementation() == __self, \"Function must be called through active proxy\");\n        _;\n    }\n\n    /**\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\n     * callable on the implementing contract but not through proxies.\n     */\n    modifier notDelegated() {\n        require(address(this) == __self, \"UUPSUpgradeable: must not be called through delegatecall\");\n        _;\n    }\n\n    /**\n     * @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the\n     * implementation. It is used to validate that the this implementation remains valid after an upgrade.\n     *\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\n     */\n    function proxiableUUID() external view virtual override notDelegated returns (bytes32) {\n        return _IMPLEMENTATION_SLOT;\n    }\n\n    /**\n     * @dev Upgrade the implementation of the proxy to `newImplementation`.\n     *\n     * Calls {_authorizeUpgrade}.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function upgradeTo(address newImplementation) external virtual onlyProxy {\n        _authorizeUpgrade(newImplementation);\n        _upgradeToAndCallUUPS(newImplementation, new bytes(0), false);\n    }\n\n    /**\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\n     * encoded in `data`.\n     *\n     * Calls {_authorizeUpgrade}.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function upgradeToAndCall(address newImplementation, bytes memory data) external payable virtual onlyProxy {\n        _authorizeUpgrade(newImplementation);\n        _upgradeToAndCallUUPS(newImplementation, data, true);\n    }\n\n    /**\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\n     * {upgradeTo} and {upgradeToAndCall}.\n     *\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\n     *\n     * ```solidity\n     * function _authorizeUpgrade(address) internal override onlyOwner {}\n     * ```\n     */\n    function _authorizeUpgrade(address newImplementation) internal virtual;\n}\n"
    },
    "contracts/interfaces/IPool.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"../PoolErrors.sol\";\n\nstruct TokenBalance {\n  address tokenAddres;\n  uint256 balance;\n}\n\nstruct Decimal {\n  uint256 value;\n  uint8 decimals;\n}\n\nstruct PoolState {\n  bool paused;\n  TokenBalance[] balances;\n  TokenBalance totalLPSupply;\n  Decimal ampFactor;\n  Decimal lpFee;\n  Decimal governanceFee;\n}\n\ninterface IPool {\n  function getState() external view returns(PoolState memory state);\n\n  function swap(\n    uint256 inputAmount,\n    uint8 inputTokenIndex,\n    uint8 outputTokenIndex,\n    uint256 minimumOutputAmount\n  ) external returns (uint256 outputAmount);\n\n  function swapExactOutput(\n    uint maximumInputAmount,\n    uint8 inputTokenIndex,\n    uint[] memory outputAmounts\n  ) external returns(uint inputAmount);\n\n  function swapExactInput(\n    uint[] memory inputAmounts,\n    uint8 outputTokenIndex,\n    uint minimumOutputAmount\n  ) external returns(uint outputAmount);\n\n  function removeExactBurn(\n    uint burnAmount,\n    uint8 outputTokenIndex,\n    uint minimumOutputAmount\n  ) external returns(uint outputAmount);\n\n  function removeExactOutput(\n    uint[] memory outputAmounts,\n    uint maximumBurnAmount\n  ) external returns(uint burnAmount);\n\n  function add(\n    uint[] memory inputAmounts,\n    uint minimumMintAmount\n  ) external returns(uint mintAmount);\n\n  function removeUniform(uint burnAmount, uint[] memory minimumOutputAmounts)\n    external returns(uint[] memory outputAmounts);\n}\n"
    },
    "contracts/interfaces/IRouting.sol": {
      "content": "//SPDX-License-Identifier: TODO\npragma solidity ^0.8.0;\n\nimport \"./IPool.sol\";\n\ninterface IRouting {\n  error Routing__ErrorMessage(string message);\n  error Routing__TokenNotRegistered(bytes20 addressOrTokenNumber);\n\n  event TokenRegistered(uint16 indexed tokenId, address indexed tokenContract, address chainPool);\n\n  event OnChainSwap(\n    address indexed to,\n    address indexed fromToken,\n    address indexed toToken,\n    uint256 outputAmount\n  );\n\n  event SwapAndTransfer(\n    address indexed from,\n    uint64 wormholeSequence,\n    address token,\n    uint256 inputAmount\n  );\n\n  event ReceiveAndSwap(\n    address indexed from,\n    uint64 wormholeSequence,\n    address token,\n    uint256 amount\n  );\n\n  function onChainSwap(\n    address fromToken,\n    uint256 inputAmount,\n    address toOwner,\n    address toToken,\n    uint256 minimumOutputAmount\n  ) external payable returns (uint256 outputAmount);\n\n  function swapAndTransfer(\n    address fromToken,\n    uint256 inputAmount,\n    uint256 firstMinimumOutputAmount,\n    uint16 wormholeRecipientChain,\n    bytes32 toOwner\n  ) external payable returns (uint64 wormholeSequence);\n\n  function receiveAndSwap(\n    bytes memory encodedVm,\n    address toToken,\n    uint256 minimumOutputAmount\n  ) external returns (uint256 outputAmount, address outpuToken);\n\n  function receiveAndSwap(bytes memory encodedVm)\n    external\n    returns (uint256 outputAmount, address outputToken);\n\n  function registerToken(\n    uint16 tokenNumber,\n    address tokenAddress,\n    address poolAddress,\n    uint8 tokenIndexInPool\n  ) external;\n\n  function getPoolStates(address[] memory poolAddresses) external view returns (PoolState[] memory);\n\n  function swimUsdAddress() external view returns (address);\n}\n"
    },
    "contracts/LpToken.sol": {
      "content": "//SPDX-License-Identifier: TODO\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20BurnableUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\nimport \"@openzeppelin/contracts/proxy/utils/UUPSUpgradeable.sol\";\n\n//The full inheritance hierarchy:\n// UUPSUpgradeable -> IERC1822Proxiable, ERC1967Upgrade\n// ERC20BurnableUpgradeable -> Initializable, ContextUpgradeable, ERC20Upgradeable\n// ContextUpgradeable -> Initializable\n// ERC20Upgradeable -> Initializable, ContextUpgradeable, IERC20Upgradeable, IERC20MetadataUpgradeable\n// OwnableUpgradeable -> Initializable, ContextUpgradeable\n// (Initializeable, ERC1967Upgrade have no parents, IERC* are interfaces)\n//\n//Of all those, only ERC20Upgradeable and OwnableUpgradeable have a non-empty initialize.\ncontract LpToken is UUPSUpgradeable, ERC20BurnableUpgradeable, OwnableUpgradeable {\n\n  function initialize(string memory name, string memory symbol)\n    external initializer returns (bool)\n  {\n    __ERC20_init_unchained(name, symbol);\n    __Ownable_init_unchained();\n    return true;\n  }\n\n  function mint(address recipient, uint amount) external onlyOwner {\n      _mint(recipient, amount);\n  }\n\n  //intentionally empty (we only want the onlyOwner modifier \"side-effect\")\n  function _authorizeUpgrade(address) internal override onlyOwner {}\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n */\ninterface IERC20Permit {\n    /**\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n     * given ``owner``'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n                /// @solidity memory-safe-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/interfaces/draft-IERC1822.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\n * proxy whose upgrades are fully controlled by the current implementation.\n */\ninterface IERC1822Proxiable {\n    /**\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\n     * address.\n     *\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\n     * function revert if invoked through a proxy.\n     */\n    function proxiableUUID() external view returns (bytes32);\n}\n"
    },
    "@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/ERC1967/ERC1967Upgrade.sol)\n\npragma solidity ^0.8.2;\n\nimport \"../beacon/IBeacon.sol\";\nimport \"../../interfaces/draft-IERC1822.sol\";\nimport \"../../utils/Address.sol\";\nimport \"../../utils/StorageSlot.sol\";\n\n/**\n * @dev This abstract contract provides getters and event emitting update functions for\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\n *\n * _Available since v4.1._\n *\n * @custom:oz-upgrades-unsafe-allow delegatecall\n */\nabstract contract ERC1967Upgrade {\n    // This is the keccak-256 hash of \"eip1967.proxy.rollback\" subtracted by 1\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\n\n    /**\n     * @dev Storage slot with the address of the current implementation.\n     * This is the keccak-256 hash of \"eip1967.proxy.implementation\" subtracted by 1, and is\n     * validated in the constructor.\n     */\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n\n    /**\n     * @dev Emitted when the implementation is upgraded.\n     */\n    event Upgraded(address indexed implementation);\n\n    /**\n     * @dev Returns the current implementation address.\n     */\n    function _getImplementation() internal view returns (address) {\n        return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new address in the EIP1967 implementation slot.\n     */\n    function _setImplementation(address newImplementation) private {\n        require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\n        StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n    }\n\n    /**\n     * @dev Perform implementation upgrade\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeTo(address newImplementation) internal {\n        _setImplementation(newImplementation);\n        emit Upgraded(newImplementation);\n    }\n\n    /**\n     * @dev Perform implementation upgrade with additional setup call.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeToAndCall(\n        address newImplementation,\n        bytes memory data,\n        bool forceCall\n    ) internal {\n        _upgradeTo(newImplementation);\n        if (data.length > 0 || forceCall) {\n            Address.functionDelegateCall(newImplementation, data);\n        }\n    }\n\n    /**\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeToAndCallUUPS(\n        address newImplementation,\n        bytes memory data,\n        bool forceCall\n    ) internal {\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\n        if (StorageSlot.getBooleanSlot(_ROLLBACK_SLOT).value) {\n            _setImplementation(newImplementation);\n        } else {\n            try IERC1822Proxiable(newImplementation).proxiableUUID() returns (bytes32 slot) {\n                require(slot == _IMPLEMENTATION_SLOT, \"ERC1967Upgrade: unsupported proxiableUUID\");\n            } catch {\n                revert(\"ERC1967Upgrade: new implementation is not UUPS\");\n            }\n            _upgradeToAndCall(newImplementation, data, forceCall);\n        }\n    }\n\n    /**\n     * @dev Storage slot with the admin of the contract.\n     * This is the keccak-256 hash of \"eip1967.proxy.admin\" subtracted by 1, and is\n     * validated in the constructor.\n     */\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\n\n    /**\n     * @dev Emitted when the admin account has changed.\n     */\n    event AdminChanged(address previousAdmin, address newAdmin);\n\n    /**\n     * @dev Returns the current admin.\n     */\n    function _getAdmin() internal view returns (address) {\n        return StorageSlot.getAddressSlot(_ADMIN_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new address in the EIP1967 admin slot.\n     */\n    function _setAdmin(address newAdmin) private {\n        require(newAdmin != address(0), \"ERC1967: new admin is the zero address\");\n        StorageSlot.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\n    }\n\n    /**\n     * @dev Changes the admin of the proxy.\n     *\n     * Emits an {AdminChanged} event.\n     */\n    function _changeAdmin(address newAdmin) internal {\n        emit AdminChanged(_getAdmin(), newAdmin);\n        _setAdmin(newAdmin);\n    }\n\n    /**\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\n     */\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\n\n    /**\n     * @dev Emitted when the beacon is upgraded.\n     */\n    event BeaconUpgraded(address indexed beacon);\n\n    /**\n     * @dev Returns the current beacon.\n     */\n    function _getBeacon() internal view returns (address) {\n        return StorageSlot.getAddressSlot(_BEACON_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\n     */\n    function _setBeacon(address newBeacon) private {\n        require(Address.isContract(newBeacon), \"ERC1967: new beacon is not a contract\");\n        require(\n            Address.isContract(IBeacon(newBeacon).implementation()),\n            \"ERC1967: beacon implementation is not a contract\"\n        );\n        StorageSlot.getAddressSlot(_BEACON_SLOT).value = newBeacon;\n    }\n\n    /**\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\n     *\n     * Emits a {BeaconUpgraded} event.\n     */\n    function _upgradeBeaconToAndCall(\n        address newBeacon,\n        bytes memory data,\n        bool forceCall\n    ) internal {\n        _setBeacon(newBeacon);\n        emit BeaconUpgraded(newBeacon);\n        if (data.length > 0 || forceCall) {\n            Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/proxy/beacon/IBeacon.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\n */\ninterface IBeacon {\n    /**\n     * @dev Must return an address that can be used as a delegate call target.\n     *\n     * {BeaconProxy} will check that this address is a contract.\n     */\n    function implementation() external view returns (address);\n}\n"
    },
    "@openzeppelin/contracts/utils/StorageSlot.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for reading and writing primitive types to specific storage slots.\n *\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\n * This library helps with reading and writing to such slots without the need for inline assembly.\n *\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\n *\n * Example usage to set ERC1967 implementation slot:\n * ```\n * contract ERC1967 {\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n *\n *     function _getImplementation() internal view returns (address) {\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n *     }\n *\n *     function _setImplementation(address newImplementation) internal {\n *         require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n *     }\n * }\n * ```\n *\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\n */\nlibrary StorageSlot {\n    struct AddressSlot {\n        address value;\n    }\n\n    struct BooleanSlot {\n        bool value;\n    }\n\n    struct Bytes32Slot {\n        bytes32 value;\n    }\n\n    struct Uint256Slot {\n        uint256 value;\n    }\n\n    /**\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\n     */\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\n     */\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\n     */\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\n     */\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20BurnableUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/extensions/ERC20Burnable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../ERC20Upgradeable.sol\";\nimport \"../../../utils/ContextUpgradeable.sol\";\nimport \"../../../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\n * tokens and those that they have an allowance for, in a way that can be\n * recognized off-chain (via event analysis).\n */\nabstract contract ERC20BurnableUpgradeable is Initializable, ContextUpgradeable, ERC20Upgradeable {\n    function __ERC20Burnable_init() internal onlyInitializing {\n    }\n\n    function __ERC20Burnable_init_unchained() internal onlyInitializing {\n    }\n    /**\n     * @dev Destroys `amount` tokens from the caller.\n     *\n     * See {ERC20-_burn}.\n     */\n    function burn(uint256 amount) public virtual {\n        _burn(_msgSender(), amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, deducting from the caller's\n     * allowance.\n     *\n     * See {ERC20-_burn} and {ERC20-allowance}.\n     *\n     * Requirements:\n     *\n     * - the caller must have allowance for ``accounts``'s tokens of at least\n     * `amount`.\n     */\n    function burnFrom(address account, uint256 amount) public virtual {\n        _spendAllowance(account, _msgSender(), amount);\n        _burn(account, amount);\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/ContextUpgradeable.sol\";\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    function __Ownable_init() internal onlyInitializing {\n        __Ownable_init_unchained();\n    }\n\n    function __Ownable_init_unchained() internal onlyInitializing {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20Upgradeable.sol\";\nimport \"./extensions/IERC20MetadataUpgradeable.sol\";\nimport \"../../utils/ContextUpgradeable.sol\";\nimport \"../../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20Upgradeable is Initializable, ContextUpgradeable, IERC20Upgradeable, IERC20MetadataUpgradeable {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * The default value of {decimals} is 18. To select a different value for\n     * {decimals} you should overload it.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    function __ERC20_init(string memory name_, string memory symbol_) internal onlyInitializing {\n        __ERC20_init_unchained(name_, symbol_);\n    }\n\n    function __ERC20_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overridden;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, amount);\n        _transfer(from, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        uint256 currentAllowance = allowance(owner, spender);\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(owner, spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `from` to `to`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {\n        require(from != address(0), \"ERC20: transfer from the zero address\");\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, amount);\n\n        uint256 fromBalance = _balances[from];\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[from] = fromBalance - amount;\n        }\n        _balances[to] += amount;\n\n        emit Transfer(from, to, amount);\n\n        _afterTokenTransfer(from, to, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        _balances[account] += amount;\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n        }\n        _totalSupply -= amount;\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\n     *\n     * Does not update the allowance amount in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Might emit an {Approval} event.\n     */\n    function _spendAllowance(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\n            unchecked {\n                _approve(owner, spender, currentAllowance - amount);\n            }\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[45] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal onlyInitializing {\n    }\n\n    function __Context_init_unchained() internal onlyInitializing {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/utils/Initializable.sol)\n\npragma solidity ^0.8.2;\n\nimport \"../../utils/AddressUpgradeable.sol\";\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n * case an upgrade adds a module that needs to be initialized.\n *\n * For example:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * contract MyToken is ERC20Upgradeable {\n *     function initialize() initializer public {\n *         __ERC20_init(\"MyToken\", \"MTK\");\n *     }\n * }\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n *     function initializeV2() reinitializer(2) public {\n *         __ERC20Permit_init(\"MyToken\");\n *     }\n * }\n * ```\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() {\n *     _disableInitializers();\n * }\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     * @custom:oz-retyped-from bool\n     */\n    uint8 private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n    event Initialized(uint8 version);\n\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\n     */\n    modifier initializer() {\n        bool isTopLevelCall = !_initializing;\n        require(\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\n            \"Initializable: contract is already initialized\"\n        );\n        _initialized = 1;\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(1);\n        }\n    }\n\n    /**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\n     * initialization.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     */\n    modifier reinitializer(uint8 version) {\n        require(!_initializing && _initialized < version, \"Initializable: contract is already initialized\");\n        _initialized = version;\n        _initializing = true;\n        _;\n        _initializing = false;\n        emit Initialized(version);\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        require(_initializing, \"Initializable: contract is not initializing\");\n        _;\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     */\n    function _disableInitializers() internal virtual {\n        require(!_initializing, \"Initializable: contract is initializing\");\n        if (_initialized < type(uint8).max) {\n            _initialized = type(uint8).max;\n            emit Initialized(type(uint8).max);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20Upgradeable {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20Upgradeable.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20MetadataUpgradeable is IERC20Upgradeable {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary AddressUpgradeable {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n                /// @solidity memory-safe-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "contracts/Routing.sol": {
      "content": "//SPDX-License-Identifier: TODO\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\n\nimport \"./interfaces/IPool.sol\";\nimport \"./interfaces/IRouting.sol\";\nimport \"./interfaces/ITokenBridge.sol\";\nimport \"./interfaces/IWormhole.sol\";\nimport \"./interfaces/IStructs.sol\";\n\nimport \"./SwimPayload.sol\";\n\ncontract Routing is\n  IRouting,\n  PausableUpgradeable,\n  OwnableUpgradeable,\n  ReentrancyGuardUpgradeable,\n  UUPSUpgradeable\n{\n  using SwimPayload for bytes;\n  using SafeERC20 for IERC20;\n\n  bytes32 private constant SWIM_USD_SOLANA_ADDRESS = 0x0;\n  uint8 private constant SWIM_USD_TOKEN_INDEX = 0;\n  uint16 private constant WORMHOLE_SOLANA_CHAIN_ID = 1;\n\n  uint32 private wormholeNonce;\n  address public swimUsdAddress;\n\n  ITokenBridge public tokenBridge;\n  IWormhole public wormhole;\n\n  struct TokenInfo {\n    uint16 tokenNumber;\n    address tokenAddress;\n    address poolAddress;\n    uint8 tokenIndexInPool;\n  }\n\n  mapping(uint16 => TokenInfo) tokenNumberMapping;\n  mapping(address => TokenInfo) tokenAddressMapping;\n\n  function initialize(address tokenBridgeAddress) public initializer {\n    __Pausable_init();\n    __Ownable_init();\n    __UUPSUpgradeable_init();\n    __ReentrancyGuard_init();\n    wormholeNonce = 0;\n    tokenBridge = ITokenBridge(tokenBridgeAddress);\n    wormhole = tokenBridge.wormhole();\n    swimUsdAddress = tokenBridge.wrappedAsset(WORMHOLE_SOLANA_CHAIN_ID, SWIM_USD_SOLANA_ADDRESS);\n  }\n\n  function pause() public onlyOwner {\n    _pause();\n  }\n\n  function unpause() public onlyOwner {\n    _unpause();\n  }\n\n  function _authorizeUpgrade(address newImplementation) internal override onlyOwner {}\n\n  /**\n   * @notice Swap two tokens using one chain\n   * @param fromToken the token the user wants to swap from\n   * @param toToken the token the user wants to swap to\n   * @param toOwner the address of token beneficiary\n   * @param inputAmount the amount of tokens the user wants to swap from\n   * @param minimumOutputAmount the min amount the user would like to receive, or revert\n   * @return outputAmount The amount of tokent that will be received\n   */\n\n  function onChainSwap(\n    address fromToken,\n    uint256 inputAmount,\n    address toOwner,\n    address toToken,\n    uint256 minimumOutputAmount\n  ) public payable whenNotPaused returns (uint256 outputAmount) {\n    (address fromPool, uint8 fromIndex) = getPoolAndIndex(fromToken);\n    (address toPool, uint8 toIndex) = getPoolAndIndex(toToken);\n\n    IERC20(fromToken).safeTransferFrom(msg.sender, address(this), inputAmount);\n    outputAmount = inputAmount;\n\n    if (fromToken != swimUsdAddress) {\n      IERC20(fromToken).safeApprove(fromPool, inputAmount);\n\n      outputAmount = IPool(fromPool).swap(\n        inputAmount,\n        fromIndex,\n        SWIM_USD_TOKEN_INDEX,\n        0\n      );\n    }\n    if (toToken != swimUsdAddress) {\n      IERC20(swimUsdAddress).safeApprove(toPool, outputAmount);\n\n      outputAmount = IPool(toPool).swap(\n        outputAmount,\n        SWIM_USD_TOKEN_INDEX,\n        toIndex,\n        minimumOutputAmount\n      );\n    }\n\n    IERC20(toToken).safeTransfer(toOwner, outputAmount);\n\n    emit OnChainSwap(toOwner, fromToken, toToken, outputAmount);\n  }\n\n  /**\n   * @notice Swap and send ERC20 token through portal\n   * @param fromToken the token user wants to swap from\n   * @param inputAmount the amount of tokens user wants to swap from\n   * @param wormholeRecipientChain Wormhole receiver chain\n   * @param toOwner the address of token beneficiary\n   * @return wormholeSequence Wormhole Sequence\n   */\n\n  function swapAndTransfer(\n    address fromToken,\n    uint256 inputAmount,\n    uint256 firstMinimumOutputAmount,\n    uint16 wormholeRecipientChain,\n    bytes32 toOwner\n  ) external payable whenNotPaused returns (uint64 wormholeSequence) {\n    (address fromPool, uint8 fromIndex) = getPoolAndIndex(fromToken);\n\n    IERC20(fromToken).safeTransferFrom(msg.sender, address(this), inputAmount);\n    uint256 receivedSwimUsdAmount = inputAmount;\n\n    if (fromToken != swimUsdAddress) {\n      IERC20(fromToken).safeApprove(fromPool, inputAmount);\n\n      receivedSwimUsdAmount = IPool(fromPool).swap(\n        inputAmount,\n        fromIndex,\n        SWIM_USD_TOKEN_INDEX,\n        firstMinimumOutputAmount\n      );\n    }\n\n    IERC20(swimUsdAddress).safeApprove(address(tokenBridge), receivedSwimUsdAmount);\n\n    if (wormholeRecipientChain == WORMHOLE_SOLANA_CHAIN_ID) {\n      uint256 arbiterFee = 0;\n      wormholeSequence = tokenBridge.transferTokens(\n        swimUsdAddress,\n        receivedSwimUsdAmount,\n        WORMHOLE_SOLANA_CHAIN_ID,\n        toOwner,\n        arbiterFee,\n        wormholeNonce\n      );\n    } else {\n      bytes memory swimPayload = SwimPayload.encode(toOwner);\n      bytes32 thisAddress = bytes32(uint256(uint160(address(this))));\n      wormholeSequence = tokenBridge.transferTokensWithPayload(\n        swimUsdAddress,\n        receivedSwimUsdAmount,\n        wormholeRecipientChain,\n        thisAddress,\n        wormholeNonce,\n        swimPayload\n      );\n    }\n\n    ++wormholeNonce;\n\n    emit SwapAndTransfer(msg.sender, wormholeSequence, fromToken, inputAmount);\n  }\n\n  /**\n   * @notice Complete a contract-controlled transfer of  an ERC20 token and swaps for toToken in parameters.\n   * If swap fails, user receives swimUsd token\n   * @dev The transaction can only be redeemed by the recipient, logical owner.\n   * @param encodedVm A byte array containing a VAA signed by the guardians.\n   * @param toToken the token address user wants to swap from\n   * @param minimumOutputAmount Minimum output amount expected\n   * @return outputAmount Amount that user will receive\n   */\n  function receiveAndSwap(\n    bytes memory encodedVm,\n    address toToken,\n    uint256 minimumOutputAmount\n  ) external whenNotPaused returns (uint256 outputAmount, address outputToken) {\n    bytes memory swimPayload = tokenBridge.completeTransferWithPayload(encodedVm);\n    swimPayload.checkVersion();\n\n    if (msg.sender != swimPayload.decodeOwner()) {\n      revert Routing__ErrorMessage(\"Sender is not the owner!\");\n    }\n\n    return _receiveAndSwap(encodedVm, msg.sender, toToken, minimumOutputAmount);\n  }\n\n  /**\n   * @notice Complete a contract-controlled transfer of an ERC20 token and swaps for token address in payload.\n   * If swap fails, user receives swimUsd token.\n   * @param encodedVm A byte array containing a VAA signed by the guardians.\n   * @return outputAmount Amount that user will receive\n   * @return outputToken Type of token that user will receive\n   */\n  function receiveAndSwap(bytes memory encodedVm)\n    external whenNotPaused returns (uint256 outputAmount, address outputToken) {\n    bytes memory swimPayload = tokenBridge.completeTransferWithPayload(encodedVm);\n    swimPayload.checkVersion();\n\n    address toOwner = swimPayload.decodeOwner();\n    (uint16 tokenNumber, uint minimumOutputAmount) = swimPayload.decodeSwapParameters();\n    address toToken = getTokenAddress(tokenNumber);\n\n    return _receiveAndSwap(encodedVm, toOwner, toToken, minimumOutputAmount);\n  }\n\n  function _receiveAndSwap(\n    bytes memory encodedVm,\n    address toOwner,\n    address toToken,\n    uint256 minimumOutputAmount\n  ) internal returns (uint256 outputAmount, address outputToken) {\n    (address toPool, uint8 toIndex) = getPoolAndIndex(toToken);\n\n    uint256 receivedSwimUsdAmount = IERC20(swimUsdAddress).balanceOf(address(this));\n    outputToken = toToken;\n    outputAmount = minimumOutputAmount;\n\n    if (toToken != swimUsdAddress) {\n      IERC20(swimUsdAddress).safeApprove(toPool, receivedSwimUsdAmount);\n\n      try\n        IPool(toPool).swap(\n          receivedSwimUsdAmount,\n          SWIM_USD_TOKEN_INDEX,\n          toIndex,\n          minimumOutputAmount\n        )\n      returns (uint256 _outputAmount) {\n        outputAmount = _outputAmount;\n        outputToken = toToken;\n      } catch {\n        outputAmount = receivedSwimUsdAmount;\n        outputToken = swimUsdAddress;\n      }\n    }\n\n    IERC20(toToken).safeTransfer(toOwner, outputAmount);\n\n    uint64 sequence = wormhole.parseVM(encodedVm).sequence;\n    emit ReceiveAndSwap(toOwner, sequence, outputToken, outputAmount);\n  }\n\n  /**\n   * @notice Registers token and pool details\n   * @dev Only contract deployer can register tokens and pools\n   * @param tokenNumber Token ID on current chain\n   * @param tokenAddress Token contract address\n   * @param poolAddress Contract address of pool on current chain\n   * @param tokenIndexInPool Token index in given pool on current chain\n   */\n  function registerToken(\n    uint16 tokenNumber,\n    address tokenAddress,\n    address poolAddress,\n    uint8 tokenIndexInPool\n  ) external onlyOwner {\n    TokenInfo memory token = tokenNumberMapping[tokenNumber];\n    token.tokenNumber = tokenNumber;\n    token.tokenAddress = tokenAddress;\n    token.poolAddress = poolAddress;\n    token.tokenIndexInPool = tokenIndexInPool;\n\n    tokenNumberMapping[tokenNumber] = token;\n    tokenAddressMapping[tokenAddress] = token;\n\n    emit TokenRegistered(tokenNumber, tokenAddress, poolAddress);\n  }\n\n  /**\n   * @notice Gets liquidities for all given pool adresses\n   * @dev TODO : when pools are done\n   * @param poolAddresses Addresses of pools\n   * @return PoolState List of objects of pool details\n   */\n  function getPoolStates(address[] memory poolAddresses)\n    external view returns (PoolState[] memory) {\n    uint256 poolCount = poolAddresses.length;\n    PoolState[] memory pools = new PoolState[](poolCount);\n\n    for (uint256 i = 0; i < poolCount; i++) {\n      pools[i] = IPool(poolAddresses[i]).getState();\n    }\n    return pools;\n  }\n\n  function getPoolAndIndex(address token) internal view returns(address, uint8) {\n    TokenInfo storage info = tokenAddressMapping[token];\n    address pool = info.poolAddress;\n    if (pool == address(0)) {\n      revert Routing__TokenNotRegistered(bytes20(uint160(token)));\n    }\n    return (pool, info.tokenIndexInPool);\n  }\n\n  function getTokenAddress(uint16 tokenNumber) internal view returns(address) {\n    address token = tokenNumberMapping[tokenNumber].tokenAddress;\n    if (token == address(0)) {\n      revert Routing__TokenNotRegistered(bytes20(uint160(tokenNumber)));\n    }\n    return token;\n  }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/utils/UUPSUpgradeable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../interfaces/draft-IERC1822Upgradeable.sol\";\nimport \"../ERC1967/ERC1967UpgradeUpgradeable.sol\";\nimport \"./Initializable.sol\";\n\n/**\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\n *\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\n * `UUPSUpgradeable` with a custom implementation of upgrades.\n *\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\n *\n * _Available since v4.1._\n */\nabstract contract UUPSUpgradeable is Initializable, IERC1822ProxiableUpgradeable, ERC1967UpgradeUpgradeable {\n    function __UUPSUpgradeable_init() internal onlyInitializing {\n    }\n\n    function __UUPSUpgradeable_init_unchained() internal onlyInitializing {\n    }\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\n    address private immutable __self = address(this);\n\n    /**\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\n     * fail.\n     */\n    modifier onlyProxy() {\n        require(address(this) != __self, \"Function must be called through delegatecall\");\n        require(_getImplementation() == __self, \"Function must be called through active proxy\");\n        _;\n    }\n\n    /**\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\n     * callable on the implementing contract but not through proxies.\n     */\n    modifier notDelegated() {\n        require(address(this) == __self, \"UUPSUpgradeable: must not be called through delegatecall\");\n        _;\n    }\n\n    /**\n     * @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the\n     * implementation. It is used to validate that the this implementation remains valid after an upgrade.\n     *\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\n     */\n    function proxiableUUID() external view virtual override notDelegated returns (bytes32) {\n        return _IMPLEMENTATION_SLOT;\n    }\n\n    /**\n     * @dev Upgrade the implementation of the proxy to `newImplementation`.\n     *\n     * Calls {_authorizeUpgrade}.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function upgradeTo(address newImplementation) external virtual onlyProxy {\n        _authorizeUpgrade(newImplementation);\n        _upgradeToAndCallUUPS(newImplementation, new bytes(0), false);\n    }\n\n    /**\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\n     * encoded in `data`.\n     *\n     * Calls {_authorizeUpgrade}.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function upgradeToAndCall(address newImplementation, bytes memory data) external payable virtual onlyProxy {\n        _authorizeUpgrade(newImplementation);\n        _upgradeToAndCallUUPS(newImplementation, data, true);\n    }\n\n    /**\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\n     * {upgradeTo} and {upgradeToAndCall}.\n     *\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\n     *\n     * ```solidity\n     * function _authorizeUpgrade(address) internal override onlyOwner {}\n     * ```\n     */\n    function _authorizeUpgrade(address newImplementation) internal virtual;\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/ContextUpgradeable.sol\";\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n * This module is used through inheritance. It will make available the\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n * the functions of your contract. Note that they will not be pausable by\n * simply including this module, only once the modifiers are put in place.\n */\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\n    /**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n    event Unpaused(address account);\n\n    bool private _paused;\n\n    /**\n     * @dev Initializes the contract in unpaused state.\n     */\n    function __Pausable_init() internal onlyInitializing {\n        __Pausable_init_unchained();\n    }\n\n    function __Pausable_init_unchained() internal onlyInitializing {\n        _paused = false;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    modifier whenNotPaused() {\n        _requireNotPaused();\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    modifier whenPaused() {\n        _requirePaused();\n        _;\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view virtual returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Throws if the contract is paused.\n     */\n    function _requireNotPaused() internal view virtual {\n        require(!paused(), \"Pausable: paused\");\n    }\n\n    /**\n     * @dev Throws if the contract is not paused.\n     */\n    function _requirePaused() internal view virtual {\n        require(paused(), \"Pausable: not paused\");\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    function _pause() internal virtual whenNotPaused {\n        _paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    function _unpause() internal virtual whenPaused {\n        _paused = false;\n        emit Unpaused(_msgSender());\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuardUpgradeable is Initializable {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    function __ReentrancyGuard_init() internal onlyInitializing {\n        __ReentrancyGuard_init_unchained();\n    }\n\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"
    },
    "contracts/interfaces/ITokenBridge.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./IWormhole.sol\";\n\ninterface ITokenBridge {\n  function transferTokensWithPayload(\n    address token,\n    uint256 amount,\n    uint16 recipientChain,\n    bytes32 recipient,\n    uint32 nonce,\n    bytes memory payload\n  ) external payable returns (uint64);\n\n  function transferTokens(\n    address token,\n    uint256 amount,\n    uint16 recipientChain,\n    bytes32 recipient,\n    uint256 arbiterFee,\n    uint32 nonce\n  ) external payable returns (uint64 sequence);\n\n  function completeTransferWithPayload(bytes memory encodedVm) external returns (bytes memory);\n\n  function wrappedAsset(uint16 tokenChainId, bytes32 tokenAddress) external view returns (address);\n\n  function wormhole() external view returns (IWormhole);\n}\n"
    },
    "contracts/interfaces/IWormhole.sol": {
      "content": "// SPDX-License-Identifier: Apache 2\n\npragma solidity ^0.8.0;\n\nimport \"./IStructs.sol\";\n\ninterface IWormhole is IStructs {\n  event LogMessagePublished(\n    address indexed sender,\n    uint64 sequence,\n    uint32 nonce,\n    bytes payload,\n    uint8 consistencyLevel\n  );\n\n  function publishMessage(\n    uint32 nonce,\n    bytes memory payload,\n    uint8 consistencyLevel\n  ) external payable returns (uint64 sequence);\n\n  function parseAndVerifyVM(bytes calldata encodedVM)\n    external\n    view\n    returns (\n      IStructs.VM memory vm,\n      bool valid,\n      string memory reason\n    );\n\n  function verifyVM(IStructs.VM memory vm)\n    external\n    view\n    returns (bool valid, string memory reason);\n\n  function verifySignatures(\n    bytes32 hash,\n    IStructs.Signature[] memory signatures,\n    IStructs.GuardianSet memory guardianSet\n  ) external pure returns (bool valid, string memory reason);\n\n  function parseVM(bytes memory encodedVM)\n    external\n    pure\n    returns (IStructs.VM memory vm);\n\n  function getGuardianSet(uint32 index)\n    external\n    view\n    returns (IStructs.GuardianSet memory);\n\n  function getCurrentGuardianSetIndex() external view returns (uint32);\n\n  function getGuardianSetExpiry() external view returns (uint32);\n\n  function governanceActionIsConsumed(bytes32 hash)\n    external\n    view\n    returns (bool);\n\n  function isInitialized(address impl) external view returns (bool);\n\n  function chainId() external view returns (uint16);\n\n  function governanceChainId() external view returns (uint16);\n\n  function governanceContract() external view returns (bytes32);\n\n  function messageFee() external view returns (uint256);\n}\n"
    },
    "contracts/interfaces/IStructs.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\ninterface IStructs {\n  struct Provider {\n    uint16 chainId;\n    uint16 governanceChainId;\n    bytes32 governanceContract;\n  }\n\n  struct GuardianSet {\n    address[] keys;\n    uint32 expirationTime;\n  }\n\n  struct Signature {\n    bytes32 r;\n    bytes32 s;\n    uint8 v;\n    uint8 guardianIndex;\n  }\n\n  struct VM {\n    uint8 version;\n    uint32 timestamp;\n    uint32 nonce;\n    uint16 emitterChainId;\n    bytes32 emitterAddress;\n    uint64 sequence;\n    uint8 consistencyLevel;\n    bytes payload;\n    uint32 guardianSetIndex;\n    Signature[] signatures;\n    bytes32 hash;\n  }\n}\n"
    },
    "contracts/SwimPayload.sol": {
      "content": "//SPDX-License-Identifier: TODO\npragma solidity ^0.8.0;\n\n//   1 byte - swim internal payload version number\n// 32 bytes - logical owner/recipient (will use ATA of owner and token on Solana)\n//  2 bytes - swimTokenNumber (support up to 65k different tokens, just to be safe)\n// 32 bytes - minimum output amount (using 32 bytes like Wormhole)\n// 16 bytes - memo/interactionId (??) (current memo is 16 bytes - can't use Wormhole sequence due to Solana originating transactions (only receive sequence number in last transaction on Solana, hence no id for earlier transactions))\n// ?? bytes - propeller parameters (propellerEnabled: bool / gasTokenPrefundingAmount: uint256 / propellerFee (?? - similar to wormhole arbiter fee))\n\nlibrary SwimPayload {\n  error InvalidVersion();\n  error TooShort();\n\n  uint8 private constant SWIM_PAYLOAD_VERSION = 1;\n\n  uint private constant VERSION_OFFSET = 0;\n  uint private constant VERSION_SIZE = 1;\n  uint private constant VERSION_MINLEN = VERSION_OFFSET + VERSION_SIZE;\n\n  uint private constant OWNER_OFFSET = VERSION_MINLEN;\n  uint private constant OWNER_SIZE = 32;\n  uint private constant OWNER_MINLEN = OWNER_OFFSET + OWNER_SIZE;\n\n  uint private constant TOKEN_NUMBER_OFFSET = OWNER_MINLEN;\n  uint private constant TOKEN_NUMBER_SIZE = 2;\n  uint private constant TOKEN_NUMBER_MINLEN = TOKEN_NUMBER_OFFSET + TOKEN_NUMBER_SIZE;\n\n  uint private constant THRESHOLD_OFFSET = TOKEN_NUMBER_MINLEN;\n  uint private constant THRESHOLD_SIZE = 32;\n  uint private constant THRESHOLD_MINLEN = THRESHOLD_OFFSET + THRESHOLD_SIZE;\n\n  uint private constant SOLIDITY_ARRAY_LENGTH_SIZE = 32;\n\n  function checkVersion(bytes memory swimPayload) internal pure {\n    checkLength(swimPayload, VERSION_MINLEN);\n    if (uint8(swimPayload[0]) != SWIM_PAYLOAD_VERSION) {\n      revert InvalidVersion();\n    }\n  }\n\n  function decodeOwner(bytes memory swimPayload) internal pure returns (address) { unchecked {\n    checkLength(swimPayload, OWNER_MINLEN);\n    uint offset = SOLIDITY_ARRAY_LENGTH_SIZE + OWNER_OFFSET;\n    uint swimOwner;\n    //memory-safe annotation only becomes available with Solidity 0.8.13\n    assembly /*(\"memory-safe\")*/ {\n      swimOwner := mload(add(swimPayload, offset))\n    }\n    return address(uint160(swimOwner));\n  }}\n\n  function decodeSwapParameters(bytes memory swimPayload)\n    internal pure returns (uint16, uint) { unchecked {\n    checkLength(swimPayload, THRESHOLD_MINLEN);\n    uint16 tokenNumber =\n        (uint16(uint8(swimPayload[TOKEN_NUMBER_OFFSET]))<<8)\n      + uint16(uint8(swimPayload[TOKEN_NUMBER_OFFSET+1]));\n\n    uint offset = SOLIDITY_ARRAY_LENGTH_SIZE + THRESHOLD_OFFSET;\n    uint thresholdAmount;\n    assembly /*(\"memory-safe\")*/ {\n      thresholdAmount := mload(add(swimPayload, offset))\n    }\n    return (tokenNumber, thresholdAmount);\n  }}\n\n  function encode(bytes32 toOwner) internal pure returns (bytes memory swimPayload) {\n    return abi.encodePacked(SWIM_PAYLOAD_VERSION, toOwner);\n  }\n\n  function checkLength(bytes memory swimPayload, uint minimumLength) private pure {\n    if (swimPayload.length < minimumLength) {\n      revert TooShort();\n    }\n  }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\n * proxy whose upgrades are fully controlled by the current implementation.\n */\ninterface IERC1822ProxiableUpgradeable {\n    /**\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\n     * address.\n     *\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\n     * function revert if invoked through a proxy.\n     */\n    function proxiableUUID() external view returns (bytes32);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/ERC1967/ERC1967Upgrade.sol)\n\npragma solidity ^0.8.2;\n\nimport \"../beacon/IBeaconUpgradeable.sol\";\nimport \"../../interfaces/draft-IERC1822Upgradeable.sol\";\nimport \"../../utils/AddressUpgradeable.sol\";\nimport \"../../utils/StorageSlotUpgradeable.sol\";\nimport \"../utils/Initializable.sol\";\n\n/**\n * @dev This abstract contract provides getters and event emitting update functions for\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\n *\n * _Available since v4.1._\n *\n * @custom:oz-upgrades-unsafe-allow delegatecall\n */\nabstract contract ERC1967UpgradeUpgradeable is Initializable {\n    function __ERC1967Upgrade_init() internal onlyInitializing {\n    }\n\n    function __ERC1967Upgrade_init_unchained() internal onlyInitializing {\n    }\n    // This is the keccak-256 hash of \"eip1967.proxy.rollback\" subtracted by 1\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\n\n    /**\n     * @dev Storage slot with the address of the current implementation.\n     * This is the keccak-256 hash of \"eip1967.proxy.implementation\" subtracted by 1, and is\n     * validated in the constructor.\n     */\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n\n    /**\n     * @dev Emitted when the implementation is upgraded.\n     */\n    event Upgraded(address indexed implementation);\n\n    /**\n     * @dev Returns the current implementation address.\n     */\n    function _getImplementation() internal view returns (address) {\n        return StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new address in the EIP1967 implementation slot.\n     */\n    function _setImplementation(address newImplementation) private {\n        require(AddressUpgradeable.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\n        StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n    }\n\n    /**\n     * @dev Perform implementation upgrade\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeTo(address newImplementation) internal {\n        _setImplementation(newImplementation);\n        emit Upgraded(newImplementation);\n    }\n\n    /**\n     * @dev Perform implementation upgrade with additional setup call.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeToAndCall(\n        address newImplementation,\n        bytes memory data,\n        bool forceCall\n    ) internal {\n        _upgradeTo(newImplementation);\n        if (data.length > 0 || forceCall) {\n            _functionDelegateCall(newImplementation, data);\n        }\n    }\n\n    /**\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeToAndCallUUPS(\n        address newImplementation,\n        bytes memory data,\n        bool forceCall\n    ) internal {\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\n        if (StorageSlotUpgradeable.getBooleanSlot(_ROLLBACK_SLOT).value) {\n            _setImplementation(newImplementation);\n        } else {\n            try IERC1822ProxiableUpgradeable(newImplementation).proxiableUUID() returns (bytes32 slot) {\n                require(slot == _IMPLEMENTATION_SLOT, \"ERC1967Upgrade: unsupported proxiableUUID\");\n            } catch {\n                revert(\"ERC1967Upgrade: new implementation is not UUPS\");\n            }\n            _upgradeToAndCall(newImplementation, data, forceCall);\n        }\n    }\n\n    /**\n     * @dev Storage slot with the admin of the contract.\n     * This is the keccak-256 hash of \"eip1967.proxy.admin\" subtracted by 1, and is\n     * validated in the constructor.\n     */\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\n\n    /**\n     * @dev Emitted when the admin account has changed.\n     */\n    event AdminChanged(address previousAdmin, address newAdmin);\n\n    /**\n     * @dev Returns the current admin.\n     */\n    function _getAdmin() internal view returns (address) {\n        return StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new address in the EIP1967 admin slot.\n     */\n    function _setAdmin(address newAdmin) private {\n        require(newAdmin != address(0), \"ERC1967: new admin is the zero address\");\n        StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\n    }\n\n    /**\n     * @dev Changes the admin of the proxy.\n     *\n     * Emits an {AdminChanged} event.\n     */\n    function _changeAdmin(address newAdmin) internal {\n        emit AdminChanged(_getAdmin(), newAdmin);\n        _setAdmin(newAdmin);\n    }\n\n    /**\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\n     */\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\n\n    /**\n     * @dev Emitted when the beacon is upgraded.\n     */\n    event BeaconUpgraded(address indexed beacon);\n\n    /**\n     * @dev Returns the current beacon.\n     */\n    function _getBeacon() internal view returns (address) {\n        return StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\n     */\n    function _setBeacon(address newBeacon) private {\n        require(AddressUpgradeable.isContract(newBeacon), \"ERC1967: new beacon is not a contract\");\n        require(\n            AddressUpgradeable.isContract(IBeaconUpgradeable(newBeacon).implementation()),\n            \"ERC1967: beacon implementation is not a contract\"\n        );\n        StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value = newBeacon;\n    }\n\n    /**\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\n     *\n     * Emits a {BeaconUpgraded} event.\n     */\n    function _upgradeBeaconToAndCall(\n        address newBeacon,\n        bytes memory data,\n        bool forceCall\n    ) internal {\n        _setBeacon(newBeacon);\n        emit BeaconUpgraded(newBeacon);\n        if (data.length > 0 || forceCall) {\n            _functionDelegateCall(IBeaconUpgradeable(newBeacon).implementation(), data);\n        }\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function _functionDelegateCall(address target, bytes memory data) private returns (bytes memory) {\n        require(AddressUpgradeable.isContract(target), \"Address: delegate call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return AddressUpgradeable.verifyCallResult(success, returndata, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\n */\ninterface IBeaconUpgradeable {\n    /**\n     * @dev Must return an address that can be used as a delegate call target.\n     *\n     * {BeaconProxy} will check that this address is a contract.\n     */\n    function implementation() external view returns (address);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for reading and writing primitive types to specific storage slots.\n *\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\n * This library helps with reading and writing to such slots without the need for inline assembly.\n *\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\n *\n * Example usage to set ERC1967 implementation slot:\n * ```\n * contract ERC1967 {\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n *\n *     function _getImplementation() internal view returns (address) {\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n *     }\n *\n *     function _setImplementation(address newImplementation) internal {\n *         require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n *     }\n * }\n * ```\n *\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\n */\nlibrary StorageSlotUpgradeable {\n    struct AddressSlot {\n        address value;\n    }\n\n    struct BooleanSlot {\n        bool value;\n    }\n\n    struct Bytes32Slot {\n        bytes32 value;\n    }\n\n    struct Uint256Slot {\n        uint256 value;\n    }\n\n    /**\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\n     */\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\n     */\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\n     */\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\n     */\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n}\n"
    },
    "contracts/mocks/MockTokenBridge.sol": {
      "content": "// SPDX-License-Identifier: TODO\n\npragma solidity ^0.8.0;\n\nimport \"../interfaces/ITokenBridge.sol\";\n\ncontract MockTokenBridge is ITokenBridge {\n\n   function transferTokensWithPayload(\n    address token,\n    uint256 amount,\n    uint16 recipientChain,\n    bytes32 recipient,\n    uint32 nonce,\n    bytes memory payload\n  ) public payable returns (uint64) {\n    return 100;\n  }\n\n  function transferTokens(\n    address token,\n    uint256 amount,\n    uint16 recipientChain,\n    bytes32 recipient,\n    uint256 arbiterFee,\n    uint32 nonce\n  ) external payable returns (uint64 sequence) {\n    return 64;\n  }\n\n  function completeTransferWithPayload(bytes memory encodedVm) external returns (bytes memory) {\n    return hex\"01020304\";\n  }\n\n  function wrappedAsset(uint16 tokenChainId, bytes32 tokenAddress) external view returns (address) {\n    return 0x8626f6940E2eb28930eFb4CeF49B2d1F2C9C1199;\n  }\n\n  function wormhole() external view returns (IWormhole) {\n    address a = address(0xC89Ce4735882C9F0f0FE26686c53074E09B0D550);\n    IWormhole _wormhole = IWormhole(a);\n    return _wormhole;\n  }\n\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"./extensions/IERC20Metadata.sol\";\nimport \"../../utils/Context.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20, IERC20Metadata {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * The default value of {decimals} is 18. To select a different value for\n     * {decimals} you should overload it.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overridden;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, amount);\n        _transfer(from, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        uint256 currentAllowance = allowance(owner, spender);\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(owner, spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `from` to `to`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {\n        require(from != address(0), \"ERC20: transfer from the zero address\");\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, amount);\n\n        uint256 fromBalance = _balances[from];\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[from] = fromBalance - amount;\n        }\n        _balances[to] += amount;\n\n        emit Transfer(from, to, amount);\n\n        _afterTokenTransfer(from, to, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        _balances[account] += amount;\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n        }\n        _totalSupply -= amount;\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\n     *\n     * Does not update the allowance amount in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Might emit an {Approval} event.\n     */\n    function _spendAllowance(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\n            unchecked {\n                _approve(owner, spender, currentAllowance - amount);\n            }\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "contracts/test/ERC20Token.sol": {
      "content": "//SPDX-License-Identifier: TODO\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\ncontract ERC20Token is ERC20, Ownable {\n  constructor(string memory name_, string memory symbol_) ERC20(name_, symbol_) {}\n\n  function mint(address recipient, uint256 amount) external onlyOwner {\n    _mint(recipient, amount);\n  }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 1000
    },
    "outputSelection": {
      "*": {
        "*": [
          "metadata",
          "evm.bytecode",
          "evm.bytecode.sourceMap",
          "ir",
          "abi",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}