{
  "address": "0xCf7Ed3AccA5a467e9e704C703E8D87F634fB0Fc9",
  "abi": [
    {
      "inputs": [],
      "name": "InvalidVersion",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "message",
          "type": "string"
        }
      ],
      "name": "Routing__ErrorMessage",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bytes20",
          "name": "addressOrTokenNumber",
          "type": "bytes20"
        }
      ],
      "name": "Routing__TokenNotRegistered",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TooShort",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "previousAdmin",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "AdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "beacon",
          "type": "address"
        }
      ],
      "name": "BeaconUpgraded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "fromToken",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "toToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "outputAmount",
          "type": "uint256"
        }
      ],
      "name": "OnChainSwap",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "wormholeSequence",
          "type": "uint64"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "ReceiveAndSwap",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "wormholeSequence",
          "type": "uint64"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "inputAmount",
          "type": "uint256"
        }
      ],
      "name": "SwapAndTransfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint16",
          "name": "tokenId",
          "type": "uint16"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "tokenContract",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "chainPool",
          "type": "address"
        }
      ],
      "name": "TokenRegistered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "implementation",
          "type": "address"
        }
      ],
      "name": "Upgraded",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "poolAddresses",
          "type": "address[]"
        }
      ],
      "name": "getPoolStates",
      "outputs": [
        {
          "components": [
            {
              "internalType": "bool",
              "name": "paused",
              "type": "bool"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "tokenAddres",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "balance",
                  "type": "uint256"
                }
              ],
              "internalType": "struct TokenBalance[]",
              "name": "balances",
              "type": "tuple[]"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "tokenAddres",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "balance",
                  "type": "uint256"
                }
              ],
              "internalType": "struct TokenBalance",
              "name": "totalLPSupply",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "value",
                  "type": "uint256"
                },
                {
                  "internalType": "uint8",
                  "name": "decimals",
                  "type": "uint8"
                }
              ],
              "internalType": "struct Decimal",
              "name": "ampFactor",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "value",
                  "type": "uint256"
                },
                {
                  "internalType": "uint8",
                  "name": "decimals",
                  "type": "uint8"
                }
              ],
              "internalType": "struct Decimal",
              "name": "lpFee",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "value",
                  "type": "uint256"
                },
                {
                  "internalType": "uint8",
                  "name": "decimals",
                  "type": "uint8"
                }
              ],
              "internalType": "struct Decimal",
              "name": "governanceFee",
              "type": "tuple"
            }
          ],
          "internalType": "struct PoolState[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenBridgeAddress",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "fromToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "inputAmount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "toOwner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "toToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "minimumOutputAmount",
          "type": "uint256"
        }
      ],
      "name": "onChainSwap",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "outputAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "proxiableUUID",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "encodedVm",
          "type": "bytes"
        },
        {
          "internalType": "address",
          "name": "toToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "minimumOutputAmount",
          "type": "uint256"
        }
      ],
      "name": "receiveAndSwap",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "outputAmount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "outputToken",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "encodedVm",
          "type": "bytes"
        }
      ],
      "name": "receiveAndSwap",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "outputAmount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "outputToken",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "tokenNumber",
          "type": "uint16"
        },
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "poolAddress",
          "type": "address"
        },
        {
          "internalType": "uint8",
          "name": "tokenIndexInPool",
          "type": "uint8"
        }
      ],
      "name": "registerToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "fromToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "inputAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "firstMinimumOutputAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint16",
          "name": "wormholeRecipientChain",
          "type": "uint16"
        },
        {
          "internalType": "bytes32",
          "name": "toOwner",
          "type": "bytes32"
        }
      ],
      "name": "swapAndTransfer",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "wormholeSequence",
          "type": "uint64"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "swimUsdAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tokenBridge",
      "outputs": [
        {
          "internalType": "contract ITokenBridge",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        }
      ],
      "name": "upgradeTo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "upgradeToAndCall",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "wormhole",
      "outputs": [
        {
          "internalType": "contract IWormhole",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xab1fd749865833ffb5d05154904c992d1e155dad2d94438ddb7720319ffb2236",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xCf7Ed3AccA5a467e9e704C703E8D87F634fB0Fc9",
    "transactionIndex": 0,
    "gasUsed": "3069211",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0xe0f64545fbc9451e2974bf1bced2783fa93ffa9cae5d521a46d7655cbaf20e78",
    "transactionHash": "0xab1fd749865833ffb5d05154904c992d1e155dad2d94438ddb7720319ffb2236",
    "logs": [],
    "blockNumber": 7,
    "cumulativeGasUsed": "3069211",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "9610c2413bf0a3a83e5088ee14e279e5",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"InvalidVersion\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"message\",\"type\":\"string\"}],\"name\":\"Routing__ErrorMessage\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes20\",\"name\":\"addressOrTokenNumber\",\"type\":\"bytes20\"}],\"name\":\"Routing__TokenNotRegistered\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TooShort\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fromToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"toToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"outputAmount\",\"type\":\"uint256\"}],\"name\":\"OnChainSwap\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"wormholeSequence\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ReceiveAndSwap\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"wormholeSequence\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"inputAmount\",\"type\":\"uint256\"}],\"name\":\"SwapAndTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint16\",\"name\":\"tokenId\",\"type\":\"uint16\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenContract\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"chainPool\",\"type\":\"address\"}],\"name\":\"TokenRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"poolAddresses\",\"type\":\"address[]\"}],\"name\":\"getPoolStates\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"paused\",\"type\":\"bool\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenAddres\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"internalType\":\"struct TokenBalance[]\",\"name\":\"balances\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenAddres\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"internalType\":\"struct TokenBalance\",\"name\":\"totalLPSupply\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"decimals\",\"type\":\"uint8\"}],\"internalType\":\"struct Decimal\",\"name\":\"ampFactor\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"decimals\",\"type\":\"uint8\"}],\"internalType\":\"struct Decimal\",\"name\":\"lpFee\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"decimals\",\"type\":\"uint8\"}],\"internalType\":\"struct Decimal\",\"name\":\"governanceFee\",\"type\":\"tuple\"}],\"internalType\":\"struct PoolState[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenBridgeAddress\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fromToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"inputAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"toOwner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"toToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minimumOutputAmount\",\"type\":\"uint256\"}],\"name\":\"onChainSwap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"outputAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"encodedVm\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"toToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minimumOutputAmount\",\"type\":\"uint256\"}],\"name\":\"receiveAndSwap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"outputAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"outputToken\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"encodedVm\",\"type\":\"bytes\"}],\"name\":\"receiveAndSwap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"outputAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"outputToken\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"tokenNumber\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"poolAddress\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"tokenIndexInPool\",\"type\":\"uint8\"}],\"name\":\"registerToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fromToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"inputAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"firstMinimumOutputAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"wormholeRecipientChain\",\"type\":\"uint16\"},{\"internalType\":\"bytes32\",\"name\":\"toOwner\",\"type\":\"bytes32\"}],\"name\":\"swapAndTransfer\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"wormholeSequence\",\"type\":\"uint64\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swimUsdAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenBridge\",\"outputs\":[{\"internalType\":\"contract ITokenBridge\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wormhole\",\"outputs\":[{\"internalType\":\"contract IWormhole\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"getPoolStates(address[])\":{\"details\":\"TODO : when pools are done\",\"params\":{\"poolAddresses\":\"Addresses of pools\"},\"returns\":{\"_0\":\"PoolState List of objects of pool details\"}},\"onChainSwap(address,uint256,address,address,uint256)\":{\"params\":{\"fromToken\":\"the token the user wants to swap from\",\"inputAmount\":\"the amount of tokens the user wants to swap from\",\"minimumOutputAmount\":\"the min amount the user would like to receive, or revert\",\"toOwner\":\"the address of token beneficiary\",\"toToken\":\"the token the user wants to swap to\"},\"returns\":{\"outputAmount\":\"The amount of tokent that will be received\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"proxiableUUID()\":{\"details\":\"Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate that the this implementation remains valid after an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\"},\"receiveAndSwap(bytes)\":{\"params\":{\"encodedVm\":\"A byte array containing a VAA signed by the guardians.\"},\"returns\":{\"outputAmount\":\"Amount that user will receive\",\"outputToken\":\"Type of token that user will receive\"}},\"receiveAndSwap(bytes,address,uint256)\":{\"details\":\"The transaction can only be redeemed by the recipient, logical owner.\",\"params\":{\"encodedVm\":\"A byte array containing a VAA signed by the guardians.\",\"minimumOutputAmount\":\"Minimum output amount expected\",\"toToken\":\"the token address user wants to swap from\"},\"returns\":{\"outputAmount\":\"Amount that user will receive\"}},\"registerToken(uint16,address,address,uint8)\":{\"details\":\"Only contract deployer can register tokens and pools\",\"params\":{\"poolAddress\":\"Contract address of pool on current chain\",\"tokenAddress\":\"Token contract address\",\"tokenIndexInPool\":\"Token index in given pool on current chain\",\"tokenNumber\":\"Token ID on current chain\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"swapAndTransfer(address,uint256,uint256,uint16,bytes32)\":{\"params\":{\"fromToken\":\"the token user wants to swap from\",\"inputAmount\":\"the amount of tokens user wants to swap from\",\"toOwner\":\"the address of token beneficiary\",\"wormholeRecipientChain\":\"Wormhole receiver chain\"},\"returns\":{\"wormholeSequence\":\"Wormhole Sequence\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"upgradeTo(address)\":{\"details\":\"Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"},\"upgradeToAndCall(address,bytes)\":{\"details\":\"Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"getPoolStates(address[])\":{\"notice\":\"Gets liquidities for all given pool adresses\"},\"onChainSwap(address,uint256,address,address,uint256)\":{\"notice\":\"Swap two tokens using one chain\"},\"receiveAndSwap(bytes)\":{\"notice\":\"Complete a contract-controlled transfer of an ERC20 token and swaps for token address in payload. If swap fails, user receives swimUsd token.\"},\"receiveAndSwap(bytes,address,uint256)\":{\"notice\":\"Complete a contract-controlled transfer of  an ERC20 token and swaps for toToken in parameters. If swap fails, user receives swimUsd token\"},\"registerToken(uint16,address,address,uint8)\":{\"notice\":\"Registers token and pool details\"},\"swapAndTransfer(address,uint256,uint256,uint16,bytes32)\":{\"notice\":\"Swap and send ERC20 token through portal\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Routing.sol\":\"Routing\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x247c62047745915c0af6b955470a72d1696ebad4352d7d3011aef1a2463cd888\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822ProxiableUpgradeable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x77c89f893e403efc6929ba842b7ccf6534d4ffe03afe31670b4a528c0ad78c0f\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeaconUpgradeable.sol\\\";\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/StorageSlotUpgradeable.sol\\\";\\nimport \\\"../utils/Initializable.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n *\\n * @custom:oz-upgrades-unsafe-allow delegatecall\\n */\\nabstract contract ERC1967UpgradeUpgradeable is Initializable {\\n    function __ERC1967Upgrade_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC1967Upgrade_init_unchained() internal onlyInitializing {\\n    }\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(AddressUpgradeable.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\\n        if (StorageSlotUpgradeable.getBooleanSlot(_ROLLBACK_SLOT).value) {\\n            _setImplementation(newImplementation);\\n        } else {\\n            try IERC1822ProxiableUpgradeable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n                require(slot == _IMPLEMENTATION_SLOT, \\\"ERC1967Upgrade: unsupported proxiableUUID\\\");\\n            } catch {\\n                revert(\\\"ERC1967Upgrade: new implementation is not UUPS\\\");\\n            }\\n            _upgradeToAndCall(newImplementation, data, forceCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Emitted when the beacon is upgraded.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(AddressUpgradeable.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            AddressUpgradeable.isContract(IBeaconUpgradeable(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(\\n        address newBeacon,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(IBeaconUpgradeable(newBeacon).implementation(), data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function _functionDelegateCall(address target, bytes memory data) private returns (bytes memory) {\\n        require(AddressUpgradeable.isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return AddressUpgradeable.verifyCallResult(success, returndata, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x315887e846f1e5f8d8fa535a229d318bb9290aaa69485117f1ee8a9a6b3be823\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeaconUpgradeable {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0x24b86ac8c005b8c654fbf6ac34a5a4f61580d7273541e83e013e89d66fbf0908\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0203dcadc5737d9ef2c211d6fa15d18ebc3b30dfa51903b64870b01a062b0b4e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/utils/UUPSUpgradeable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../ERC1967/ERC1967UpgradeUpgradeable.sol\\\";\\nimport \\\"./Initializable.sol\\\";\\n\\n/**\\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\\n *\\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\\n * `UUPSUpgradeable` with a custom implementation of upgrades.\\n *\\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract UUPSUpgradeable is Initializable, IERC1822ProxiableUpgradeable, ERC1967UpgradeUpgradeable {\\n    function __UUPSUpgradeable_init() internal onlyInitializing {\\n    }\\n\\n    function __UUPSUpgradeable_init_unchained() internal onlyInitializing {\\n    }\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\\n    address private immutable __self = address(this);\\n\\n    /**\\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\\n     * fail.\\n     */\\n    modifier onlyProxy() {\\n        require(address(this) != __self, \\\"Function must be called through delegatecall\\\");\\n        require(_getImplementation() == __self, \\\"Function must be called through active proxy\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\\n     * callable on the implementing contract but not through proxies.\\n     */\\n    modifier notDelegated() {\\n        require(address(this) == __self, \\\"UUPSUpgradeable: must not be called through delegatecall\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the\\n     * implementation. It is used to validate that the this implementation remains valid after an upgrade.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\\n     */\\n    function proxiableUUID() external view virtual override notDelegated returns (bytes32) {\\n        return _IMPLEMENTATION_SLOT;\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeTo(address newImplementation) external virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, new bytes(0), false);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\\n     * encoded in `data`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) external payable virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, data, true);\\n    }\\n\\n    /**\\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\\n     * {upgradeTo} and {upgradeToAndCall}.\\n     *\\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\\n     *\\n     * ```solidity\\n     * function _authorizeUpgrade(address) internal override onlyOwner {}\\n     * ```\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal virtual;\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x6e36e9b4b71de699c2f3f0d4e4d1aa0b35da99a26e8d5b91ef09ba234b4ef270\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal onlyInitializing {\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal onlyInitializing {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x40c636b4572ff5f1dc50cf22097e93c0723ee14eff87e99ac2b02636eeca1250\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x8cc03c5ac17e8a7396e487cda41fc1f1dfdb91db7d528e6da84bee3b6dd7e167\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x611aa3f23e59cfdd1863c536776407b3e33d695152a266fa7cfb34440a29a8a3\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlotUpgradeable {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x09864aea84f01e39313375b5610c73a3c1c68abbdc51e5ccdd25ff977fdadf9a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x032807210d1d7d218963d7355d62e021a84bf1b3339f4f50be2f63b53cccaf29\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd6153ce99bcdcce22b124f755e72553295be6abcd63804cfdffceb188b8bef10\",\"license\":\"MIT\"},\"contracts/PoolErrors.sol\":{\"content\":\"//SPDX-License-Identifier: TODO\\npragma solidity ^0.8.0;\\n\\n\\nerror Equalize_MaxAmountExceeded(uint amount, int8 equalizer);\\nerror Equalize_LosingAllPrecision(uint value, int8 equalizer);\\n\\nerror CenterAlignment_NumericOverflow();\\n\\nerror Invariant_UnknownBalanceTooLarge(uint unknownBalance);\\n\\nerror PoolMath_ImpossibleRemove();\\n\\n//governance errors:\\nerror Pool_LpTokenInitializationFailed();\\nerror Pool_FirstTokenNotSwimUSD(address value, address expected);\\nerror Pool_MaxTokenCountExceeded(uint8 value, uint8 maximum);\\nerror Pool_TokenEqualizerCountMismatch(uint8 count, uint8 expected);\\nerror Pool_TokenEqualizerTooSmall(int8 equalizer, int8 minimum);\\nerror Pool_TokenEqualizerTooLarge(int8 equalizer, int8 maximum);\\nerror Pool_ConstantProductNotSupportedForTokenCount(uint8 tokenCount);\\nerror Pool_AmpFactorTooSmall(uint32 ampFactor, uint32 minimum);\\nerror Pool_AmpFactorTooLarge(uint32 ampFactor, uint32 maximum);\\nerror Pool_AmpFactorIsFixedForConstantProductPools();\\nerror Pool_AmpFactorTargetTimestampTooSmall(uint32 target, uint32 minimum);\\nerror Pool_AmpFactorRelativeAdjustmentTooLarge(uint32 current, uint32 target, uint32 threshold);\\nerror Pool_TotalFeeTooLarge(uint32 totalFee, uint32 maximum);\\nerror Pool_NonZeroGovernanceFeeButNoRecipient();\\n\\n//defi errors:\\nerror Pool_AmountCountMismatch(uint8 count, uint8 expected);\\nerror Pool_InvalidTokenIndex(uint8 tokenIndex, uint8 tokenCount);\\nerror Pool_SlippageExceeded(address token, uint amount, uint threshold);\\nerror Pool_AmountExceedsSupply(address token, uint amount, uint poolbalance);\\nerror Pool_RequestedTokenAmountNotZero(uint8 tokenIndex, uint amount);\\nerror Pool_InitialAddMustIncludeAllTokens(uint8 missingAmountIndex);\\n\\nerror Pool_IsPaused();\\nerror Pool_GovernanceOnly();\\n\",\"keccak256\":\"0xcf474d6e354cf7f71573118d5e69919034a7fdc9539a245091d6a0116661aab8\",\"license\":\"TODO\"},\"contracts/Routing.sol\":{\"content\":\"//SPDX-License-Identifier: TODO\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\nimport \\\"./interfaces/IPool.sol\\\";\\nimport \\\"./interfaces/IRouting.sol\\\";\\nimport \\\"./interfaces/ITokenBridge.sol\\\";\\nimport \\\"./interfaces/IWormhole.sol\\\";\\nimport \\\"./interfaces/IStructs.sol\\\";\\n\\nimport \\\"./SwimPayload.sol\\\";\\n\\ncontract Routing is\\n  IRouting,\\n  PausableUpgradeable,\\n  OwnableUpgradeable,\\n  ReentrancyGuardUpgradeable,\\n  UUPSUpgradeable\\n{\\n  using SwimPayload for bytes;\\n  using SafeERC20 for IERC20;\\n\\n  bytes32 private constant SWIM_USD_SOLANA_ADDRESS = 0x0;\\n  uint8 private constant SWIM_USD_TOKEN_INDEX = 0;\\n  uint16 private constant WORMHOLE_SOLANA_CHAIN_ID = 1;\\n\\n  uint32 private wormholeNonce;\\n  address public swimUsdAddress;\\n\\n  ITokenBridge public tokenBridge;\\n  IWormhole public wormhole;\\n\\n  struct TokenInfo {\\n    uint16 tokenNumber;\\n    address tokenAddress;\\n    address poolAddress;\\n    uint8 tokenIndexInPool;\\n  }\\n\\n  mapping(uint16 => TokenInfo) tokenNumberMapping;\\n  mapping(address => TokenInfo) tokenAddressMapping;\\n\\n  function initialize(address tokenBridgeAddress) public initializer {\\n    __Pausable_init();\\n    __Ownable_init();\\n    __UUPSUpgradeable_init();\\n    __ReentrancyGuard_init();\\n    wormholeNonce = 0;\\n    tokenBridge = ITokenBridge(tokenBridgeAddress);\\n    wormhole = tokenBridge.wormhole();\\n    swimUsdAddress = tokenBridge.wrappedAsset(WORMHOLE_SOLANA_CHAIN_ID, SWIM_USD_SOLANA_ADDRESS);\\n  }\\n\\n  function pause() public onlyOwner {\\n    _pause();\\n  }\\n\\n  function unpause() public onlyOwner {\\n    _unpause();\\n  }\\n\\n  function _authorizeUpgrade(address newImplementation) internal override onlyOwner {}\\n\\n  /**\\n   * @notice Swap two tokens using one chain\\n   * @param fromToken the token the user wants to swap from\\n   * @param toToken the token the user wants to swap to\\n   * @param toOwner the address of token beneficiary\\n   * @param inputAmount the amount of tokens the user wants to swap from\\n   * @param minimumOutputAmount the min amount the user would like to receive, or revert\\n   * @return outputAmount The amount of tokent that will be received\\n   */\\n\\n  function onChainSwap(\\n    address fromToken,\\n    uint256 inputAmount,\\n    address toOwner,\\n    address toToken,\\n    uint256 minimumOutputAmount\\n  ) public payable whenNotPaused returns (uint256 outputAmount) {\\n    (address fromPool, uint8 fromIndex) = getPoolAndIndex(fromToken);\\n    (address toPool, uint8 toIndex) = getPoolAndIndex(toToken);\\n\\n    IERC20(fromToken).safeTransferFrom(msg.sender, address(this), inputAmount);\\n    outputAmount = inputAmount;\\n\\n    if (fromToken != swimUsdAddress) {\\n      IERC20(fromToken).safeApprove(fromPool, inputAmount);\\n\\n      outputAmount = IPool(fromPool).swap(\\n        inputAmount,\\n        fromIndex,\\n        SWIM_USD_TOKEN_INDEX,\\n        0\\n      );\\n    }\\n    if (toToken != swimUsdAddress) {\\n      IERC20(swimUsdAddress).safeApprove(toPool, outputAmount);\\n\\n      outputAmount = IPool(toPool).swap(\\n        outputAmount,\\n        SWIM_USD_TOKEN_INDEX,\\n        toIndex,\\n        minimumOutputAmount\\n      );\\n    }\\n\\n    IERC20(toToken).safeTransfer(toOwner, outputAmount);\\n\\n    emit OnChainSwap(toOwner, fromToken, toToken, outputAmount);\\n  }\\n\\n  /**\\n   * @notice Swap and send ERC20 token through portal\\n   * @param fromToken the token user wants to swap from\\n   * @param inputAmount the amount of tokens user wants to swap from\\n   * @param wormholeRecipientChain Wormhole receiver chain\\n   * @param toOwner the address of token beneficiary\\n   * @return wormholeSequence Wormhole Sequence\\n   */\\n\\n  function swapAndTransfer(\\n    address fromToken,\\n    uint256 inputAmount,\\n    uint256 firstMinimumOutputAmount,\\n    uint16 wormholeRecipientChain,\\n    bytes32 toOwner\\n  ) external payable whenNotPaused returns (uint64 wormholeSequence) {\\n    (address fromPool, uint8 fromIndex) = getPoolAndIndex(fromToken);\\n\\n    IERC20(fromToken).safeTransferFrom(msg.sender, address(this), inputAmount);\\n    uint256 receivedSwimUsdAmount = inputAmount;\\n\\n    if (fromToken != swimUsdAddress) {\\n      IERC20(fromToken).safeApprove(fromPool, inputAmount);\\n\\n      receivedSwimUsdAmount = IPool(fromPool).swap(\\n        inputAmount,\\n        fromIndex,\\n        SWIM_USD_TOKEN_INDEX,\\n        firstMinimumOutputAmount\\n      );\\n    }\\n\\n    IERC20(swimUsdAddress).safeApprove(address(tokenBridge), receivedSwimUsdAmount);\\n\\n    if (wormholeRecipientChain == WORMHOLE_SOLANA_CHAIN_ID) {\\n      uint256 arbiterFee = 0;\\n      wormholeSequence = tokenBridge.transferTokens(\\n        swimUsdAddress,\\n        receivedSwimUsdAmount,\\n        WORMHOLE_SOLANA_CHAIN_ID,\\n        toOwner,\\n        arbiterFee,\\n        wormholeNonce\\n      );\\n    } else {\\n      bytes memory swimPayload = SwimPayload.encode(toOwner);\\n      bytes32 thisAddress = bytes32(uint256(uint160(address(this))));\\n      wormholeSequence = tokenBridge.transferTokensWithPayload(\\n        swimUsdAddress,\\n        receivedSwimUsdAmount,\\n        wormholeRecipientChain,\\n        thisAddress,\\n        wormholeNonce,\\n        swimPayload\\n      );\\n    }\\n\\n    ++wormholeNonce;\\n\\n    emit SwapAndTransfer(msg.sender, wormholeSequence, fromToken, inputAmount);\\n  }\\n\\n  /**\\n   * @notice Complete a contract-controlled transfer of  an ERC20 token and swaps for toToken in parameters.\\n   * If swap fails, user receives swimUsd token\\n   * @dev The transaction can only be redeemed by the recipient, logical owner.\\n   * @param encodedVm A byte array containing a VAA signed by the guardians.\\n   * @param toToken the token address user wants to swap from\\n   * @param minimumOutputAmount Minimum output amount expected\\n   * @return outputAmount Amount that user will receive\\n   */\\n  function receiveAndSwap(\\n    bytes memory encodedVm,\\n    address toToken,\\n    uint256 minimumOutputAmount\\n  ) external whenNotPaused returns (uint256 outputAmount, address outputToken) {\\n    bytes memory swimPayload = tokenBridge.completeTransferWithPayload(encodedVm);\\n    swimPayload.checkVersion();\\n\\n    if (msg.sender != swimPayload.decodeOwner()) {\\n      revert Routing__ErrorMessage(\\\"Sender is not the owner!\\\");\\n    }\\n\\n    return _receiveAndSwap(encodedVm, msg.sender, toToken, minimumOutputAmount);\\n  }\\n\\n  /**\\n   * @notice Complete a contract-controlled transfer of an ERC20 token and swaps for token address in payload.\\n   * If swap fails, user receives swimUsd token.\\n   * @param encodedVm A byte array containing a VAA signed by the guardians.\\n   * @return outputAmount Amount that user will receive\\n   * @return outputToken Type of token that user will receive\\n   */\\n  function receiveAndSwap(bytes memory encodedVm)\\n    external whenNotPaused returns (uint256 outputAmount, address outputToken) {\\n    bytes memory swimPayload = tokenBridge.completeTransferWithPayload(encodedVm);\\n    swimPayload.checkVersion();\\n\\n    address toOwner = swimPayload.decodeOwner();\\n    (uint16 tokenNumber, uint minimumOutputAmount) = swimPayload.decodeSwapParameters();\\n    address toToken = getTokenAddress(tokenNumber);\\n\\n    return _receiveAndSwap(encodedVm, toOwner, toToken, minimumOutputAmount);\\n  }\\n\\n  function _receiveAndSwap(\\n    bytes memory encodedVm,\\n    address toOwner,\\n    address toToken,\\n    uint256 minimumOutputAmount\\n  ) internal returns (uint256 outputAmount, address outputToken) {\\n    (address toPool, uint8 toIndex) = getPoolAndIndex(toToken);\\n\\n    uint256 receivedSwimUsdAmount = IERC20(swimUsdAddress).balanceOf(address(this));\\n    outputToken = toToken;\\n    outputAmount = minimumOutputAmount;\\n\\n    if (toToken != swimUsdAddress) {\\n      IERC20(swimUsdAddress).safeApprove(toPool, receivedSwimUsdAmount);\\n\\n      try\\n        IPool(toPool).swap(\\n          receivedSwimUsdAmount,\\n          SWIM_USD_TOKEN_INDEX,\\n          toIndex,\\n          minimumOutputAmount\\n        )\\n      returns (uint256 _outputAmount) {\\n        outputAmount = _outputAmount;\\n        outputToken = toToken;\\n      } catch {\\n        outputAmount = receivedSwimUsdAmount;\\n        outputToken = swimUsdAddress;\\n      }\\n    }\\n\\n    IERC20(toToken).safeTransfer(toOwner, outputAmount);\\n\\n    uint64 sequence = wormhole.parseVM(encodedVm).sequence;\\n    emit ReceiveAndSwap(toOwner, sequence, outputToken, outputAmount);\\n  }\\n\\n  /**\\n   * @notice Registers token and pool details\\n   * @dev Only contract deployer can register tokens and pools\\n   * @param tokenNumber Token ID on current chain\\n   * @param tokenAddress Token contract address\\n   * @param poolAddress Contract address of pool on current chain\\n   * @param tokenIndexInPool Token index in given pool on current chain\\n   */\\n  function registerToken(\\n    uint16 tokenNumber,\\n    address tokenAddress,\\n    address poolAddress,\\n    uint8 tokenIndexInPool\\n  ) external onlyOwner {\\n    TokenInfo memory token = tokenNumberMapping[tokenNumber];\\n    token.tokenNumber = tokenNumber;\\n    token.tokenAddress = tokenAddress;\\n    token.poolAddress = poolAddress;\\n    token.tokenIndexInPool = tokenIndexInPool;\\n\\n    tokenNumberMapping[tokenNumber] = token;\\n    tokenAddressMapping[tokenAddress] = token;\\n\\n    emit TokenRegistered(tokenNumber, tokenAddress, poolAddress);\\n  }\\n\\n  /**\\n   * @notice Gets liquidities for all given pool adresses\\n   * @dev TODO : when pools are done\\n   * @param poolAddresses Addresses of pools\\n   * @return PoolState List of objects of pool details\\n   */\\n  function getPoolStates(address[] memory poolAddresses)\\n    external view returns (PoolState[] memory) {\\n    uint256 poolCount = poolAddresses.length;\\n    PoolState[] memory pools = new PoolState[](poolCount);\\n\\n    for (uint256 i = 0; i < poolCount; i++) {\\n      pools[i] = IPool(poolAddresses[i]).getState();\\n    }\\n    return pools;\\n  }\\n\\n  function getPoolAndIndex(address token) internal view returns(address, uint8) {\\n    TokenInfo storage info = tokenAddressMapping[token];\\n    address pool = info.poolAddress;\\n    if (pool == address(0)) {\\n      revert Routing__TokenNotRegistered(bytes20(uint160(token)));\\n    }\\n    return (pool, info.tokenIndexInPool);\\n  }\\n\\n  function getTokenAddress(uint16 tokenNumber) internal view returns(address) {\\n    address token = tokenNumberMapping[tokenNumber].tokenAddress;\\n    if (token == address(0)) {\\n      revert Routing__TokenNotRegistered(bytes20(uint160(tokenNumber)));\\n    }\\n    return token;\\n  }\\n}\\n\",\"keccak256\":\"0x206d509e426fc030195340bcfc8660339bd6c5e3af087f2b604f5d9490823b6f\",\"license\":\"TODO\"},\"contracts/SwimPayload.sol\":{\"content\":\"//SPDX-License-Identifier: TODO\\npragma solidity ^0.8.0;\\n\\n//   1 byte - swim internal payload version number\\n// 32 bytes - logical owner/recipient (will use ATA of owner and token on Solana)\\n//  2 bytes - swimTokenNumber (support up to 65k different tokens, just to be safe)\\n// 32 bytes - minimum output amount (using 32 bytes like Wormhole)\\n// 16 bytes - memo/interactionId (??) (current memo is 16 bytes - can't use Wormhole sequence due to Solana originating transactions (only receive sequence number in last transaction on Solana, hence no id for earlier transactions))\\n// ?? bytes - propeller parameters (propellerEnabled: bool / gasTokenPrefundingAmount: uint256 / propellerFee (?? - similar to wormhole arbiter fee))\\n\\nlibrary SwimPayload {\\n  error InvalidVersion();\\n  error TooShort();\\n\\n  uint8 private constant SWIM_PAYLOAD_VERSION = 1;\\n\\n  uint private constant VERSION_OFFSET = 0;\\n  uint private constant VERSION_SIZE = 1;\\n  uint private constant VERSION_MINLEN = VERSION_OFFSET + VERSION_SIZE;\\n\\n  uint private constant OWNER_OFFSET = VERSION_MINLEN;\\n  uint private constant OWNER_SIZE = 32;\\n  uint private constant OWNER_MINLEN = OWNER_OFFSET + OWNER_SIZE;\\n\\n  uint private constant TOKEN_NUMBER_OFFSET = OWNER_MINLEN;\\n  uint private constant TOKEN_NUMBER_SIZE = 2;\\n  uint private constant TOKEN_NUMBER_MINLEN = TOKEN_NUMBER_OFFSET + TOKEN_NUMBER_SIZE;\\n\\n  uint private constant THRESHOLD_OFFSET = TOKEN_NUMBER_MINLEN;\\n  uint private constant THRESHOLD_SIZE = 32;\\n  uint private constant THRESHOLD_MINLEN = THRESHOLD_OFFSET + THRESHOLD_SIZE;\\n\\n  uint private constant SOLIDITY_ARRAY_LENGTH_SIZE = 32;\\n\\n  function checkVersion(bytes memory swimPayload) internal pure {\\n    checkLength(swimPayload, VERSION_MINLEN);\\n    if (uint8(swimPayload[0]) != SWIM_PAYLOAD_VERSION) {\\n      revert InvalidVersion();\\n    }\\n  }\\n\\n  function decodeOwner(bytes memory swimPayload) internal pure returns (address) { unchecked {\\n    checkLength(swimPayload, OWNER_MINLEN);\\n    uint offset = SOLIDITY_ARRAY_LENGTH_SIZE + OWNER_OFFSET;\\n    uint swimOwner;\\n    //memory-safe annotation only becomes available with Solidity 0.8.13\\n    assembly /*(\\\"memory-safe\\\")*/ {\\n      swimOwner := mload(add(swimPayload, offset))\\n    }\\n    return address(uint160(swimOwner));\\n  }}\\n\\n  function decodeSwapParameters(bytes memory swimPayload)\\n    internal pure returns (uint16, uint) { unchecked {\\n    checkLength(swimPayload, THRESHOLD_MINLEN);\\n    uint16 tokenNumber =\\n        (uint16(uint8(swimPayload[TOKEN_NUMBER_OFFSET]))<<8)\\n      + uint16(uint8(swimPayload[TOKEN_NUMBER_OFFSET+1]));\\n\\n    uint offset = SOLIDITY_ARRAY_LENGTH_SIZE + THRESHOLD_OFFSET;\\n    uint thresholdAmount;\\n    assembly /*(\\\"memory-safe\\\")*/ {\\n      thresholdAmount := mload(add(swimPayload, offset))\\n    }\\n    return (tokenNumber, thresholdAmount);\\n  }}\\n\\n  function encode(bytes32 toOwner) internal pure returns (bytes memory swimPayload) {\\n    return abi.encodePacked(SWIM_PAYLOAD_VERSION, toOwner);\\n  }\\n\\n  function checkLength(bytes memory swimPayload, uint minimumLength) private pure {\\n    if (swimPayload.length < minimumLength) {\\n      revert TooShort();\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x8e1db5013bf0f4274fd890b895f9d5238dfa869e49fab229c06acfe523adefc6\",\"license\":\"TODO\"},\"contracts/interfaces/IPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"../PoolErrors.sol\\\";\\n\\nstruct TokenBalance {\\n  address tokenAddres;\\n  uint256 balance;\\n}\\n\\nstruct Decimal {\\n  uint256 value;\\n  uint8 decimals;\\n}\\n\\nstruct PoolState {\\n  bool paused;\\n  TokenBalance[] balances;\\n  TokenBalance totalLPSupply;\\n  Decimal ampFactor;\\n  Decimal lpFee;\\n  Decimal governanceFee;\\n}\\n\\ninterface IPool {\\n  function getState() external view returns(PoolState memory state);\\n\\n  function swap(\\n    uint256 inputAmount,\\n    uint8 inputTokenIndex,\\n    uint8 outputTokenIndex,\\n    uint256 minimumOutputAmount\\n  ) external returns (uint256 outputAmount);\\n\\n  function swapExactOutput(\\n    uint maximumInputAmount,\\n    uint8 inputTokenIndex,\\n    uint[] memory outputAmounts\\n  ) external returns(uint inputAmount);\\n\\n  function swapExactInput(\\n    uint[] memory inputAmounts,\\n    uint8 outputTokenIndex,\\n    uint minimumOutputAmount\\n  ) external returns(uint outputAmount);\\n\\n  function removeExactBurn(\\n    uint burnAmount,\\n    uint8 outputTokenIndex,\\n    uint minimumOutputAmount\\n  ) external returns(uint outputAmount);\\n\\n  function removeExactOutput(\\n    uint[] memory outputAmounts,\\n    uint maximumBurnAmount\\n  ) external returns(uint burnAmount);\\n\\n  function add(\\n    uint[] memory inputAmounts,\\n    uint minimumMintAmount\\n  ) external returns(uint mintAmount);\\n\\n  function removeUniform(uint burnAmount, uint[] memory minimumOutputAmounts)\\n    external returns(uint[] memory outputAmounts);\\n}\\n\",\"keccak256\":\"0xac816257094855c7f39b73141c37ba07341a2438f1be7bd4b57ca945867b291b\",\"license\":\"MIT\"},\"contracts/interfaces/IRouting.sol\":{\"content\":\"//SPDX-License-Identifier: TODO\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IPool.sol\\\";\\n\\ninterface IRouting {\\n  error Routing__ErrorMessage(string message);\\n  error Routing__TokenNotRegistered(bytes20 addressOrTokenNumber);\\n\\n  event TokenRegistered(uint16 indexed tokenId, address indexed tokenContract, address chainPool);\\n\\n  event OnChainSwap(\\n    address indexed to,\\n    address indexed fromToken,\\n    address indexed toToken,\\n    uint256 outputAmount\\n  );\\n\\n  event SwapAndTransfer(\\n    address indexed from,\\n    uint64 wormholeSequence,\\n    address token,\\n    uint256 inputAmount\\n  );\\n\\n  event ReceiveAndSwap(\\n    address indexed from,\\n    uint64 wormholeSequence,\\n    address token,\\n    uint256 amount\\n  );\\n\\n  function onChainSwap(\\n    address fromToken,\\n    uint256 inputAmount,\\n    address toOwner,\\n    address toToken,\\n    uint256 minimumOutputAmount\\n  ) external payable returns (uint256 outputAmount);\\n\\n  function swapAndTransfer(\\n    address fromToken,\\n    uint256 inputAmount,\\n    uint256 firstMinimumOutputAmount,\\n    uint16 wormholeRecipientChain,\\n    bytes32 toOwner\\n  ) external payable returns (uint64 wormholeSequence);\\n\\n  function receiveAndSwap(\\n    bytes memory encodedVm,\\n    address toToken,\\n    uint256 minimumOutputAmount\\n  ) external returns (uint256 outputAmount, address outpuToken);\\n\\n  function receiveAndSwap(bytes memory encodedVm)\\n    external\\n    returns (uint256 outputAmount, address outputToken);\\n\\n  function registerToken(\\n    uint16 tokenNumber,\\n    address tokenAddress,\\n    address poolAddress,\\n    uint8 tokenIndexInPool\\n  ) external;\\n\\n  function getPoolStates(address[] memory poolAddresses) external view returns (PoolState[] memory);\\n\\n  function swimUsdAddress() external view returns (address);\\n}\\n\",\"keccak256\":\"0x38b7d04496e44a4f9f678e8902a50a2ad3bf54f83b54387f8685f31504acfa78\",\"license\":\"TODO\"},\"contracts/interfaces/IStructs.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface IStructs {\\n  struct Provider {\\n    uint16 chainId;\\n    uint16 governanceChainId;\\n    bytes32 governanceContract;\\n  }\\n\\n  struct GuardianSet {\\n    address[] keys;\\n    uint32 expirationTime;\\n  }\\n\\n  struct Signature {\\n    bytes32 r;\\n    bytes32 s;\\n    uint8 v;\\n    uint8 guardianIndex;\\n  }\\n\\n  struct VM {\\n    uint8 version;\\n    uint32 timestamp;\\n    uint32 nonce;\\n    uint16 emitterChainId;\\n    bytes32 emitterAddress;\\n    uint64 sequence;\\n    uint8 consistencyLevel;\\n    bytes payload;\\n    uint32 guardianSetIndex;\\n    Signature[] signatures;\\n    bytes32 hash;\\n  }\\n}\\n\",\"keccak256\":\"0x846e9a3def6a97e1822e1aa36b0698d4cee04ca2a3d7ccf8b32ff8dba8d7c164\",\"license\":\"MIT\"},\"contracts/interfaces/ITokenBridge.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IWormhole.sol\\\";\\n\\ninterface ITokenBridge {\\n  function transferTokensWithPayload(\\n    address token,\\n    uint256 amount,\\n    uint16 recipientChain,\\n    bytes32 recipient,\\n    uint32 nonce,\\n    bytes memory payload\\n  ) external payable returns (uint64);\\n\\n  function transferTokens(\\n    address token,\\n    uint256 amount,\\n    uint16 recipientChain,\\n    bytes32 recipient,\\n    uint256 arbiterFee,\\n    uint32 nonce\\n  ) external payable returns (uint64 sequence);\\n\\n  function completeTransferWithPayload(bytes memory encodedVm) external returns (bytes memory);\\n\\n  function wrappedAsset(uint16 tokenChainId, bytes32 tokenAddress) external view returns (address);\\n\\n  function wormhole() external view returns (IWormhole);\\n}\\n\",\"keccak256\":\"0x3e9248a4a3483dad2cab743362d8dab26b1f8dac330e030662476cbed8a90621\",\"license\":\"MIT\"},\"contracts/interfaces/IWormhole.sol\":{\"content\":\"// SPDX-License-Identifier: Apache 2\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IStructs.sol\\\";\\n\\ninterface IWormhole is IStructs {\\n  event LogMessagePublished(\\n    address indexed sender,\\n    uint64 sequence,\\n    uint32 nonce,\\n    bytes payload,\\n    uint8 consistencyLevel\\n  );\\n\\n  function publishMessage(\\n    uint32 nonce,\\n    bytes memory payload,\\n    uint8 consistencyLevel\\n  ) external payable returns (uint64 sequence);\\n\\n  function parseAndVerifyVM(bytes calldata encodedVM)\\n    external\\n    view\\n    returns (\\n      IStructs.VM memory vm,\\n      bool valid,\\n      string memory reason\\n    );\\n\\n  function verifyVM(IStructs.VM memory vm)\\n    external\\n    view\\n    returns (bool valid, string memory reason);\\n\\n  function verifySignatures(\\n    bytes32 hash,\\n    IStructs.Signature[] memory signatures,\\n    IStructs.GuardianSet memory guardianSet\\n  ) external pure returns (bool valid, string memory reason);\\n\\n  function parseVM(bytes memory encodedVM)\\n    external\\n    pure\\n    returns (IStructs.VM memory vm);\\n\\n  function getGuardianSet(uint32 index)\\n    external\\n    view\\n    returns (IStructs.GuardianSet memory);\\n\\n  function getCurrentGuardianSetIndex() external view returns (uint32);\\n\\n  function getGuardianSetExpiry() external view returns (uint32);\\n\\n  function governanceActionIsConsumed(bytes32 hash)\\n    external\\n    view\\n    returns (bool);\\n\\n  function isInitialized(address impl) external view returns (bool);\\n\\n  function chainId() external view returns (uint16);\\n\\n  function governanceChainId() external view returns (uint16);\\n\\n  function governanceContract() external view returns (bytes32);\\n\\n  function messageFee() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xad270f1a1269b294f955676a063e7a9679c1e54222febe1f551411666fd05c3f\",\"license\":\"Apache 2\"}},\"version\":1}",
  "bytecode": "0x60a06040523060805234801561001457600080fd5b506080516136bb61004c600039600081816103dd01528181610467015281816108820152818161090701526109f101526136bb6000f3fe6080604052600436106101445760003560e01c806384acd1bb116100c0578063c6328a4611610074578063f2fde38b11610059578063f2fde38b1461037f578063f6bf28b51461039f578063fe4bc67a146103bf57600080fd5b8063c6328a4614610321578063cd5af9ae1461034257600080fd5b8063a174e5b7116100a5578063a174e5b7146102ac578063b1719a57146102d5578063c4d66de81461030157600080fd5b806384acd1bb146102555780638da5cb5b1461028e57600080fd5b806352d1902d116101175780636bde354a116100fc5780636bde354a146101fe578063715018a61461022b5780638456cb591461024057600080fd5b806352d1902d146101b35780635c975abb146101db57600080fd5b80633659cfe6146101495780633954802a1461016b5780633f4ba83a1461018b5780634f1ef286146101a0575b600080fd5b34801561015557600080fd5b50610169610164366004612af7565b6103d2565b005b34801561017757600080fd5b50610169610186366004612b33565b610553565b34801561019757600080fd5b50610169610865565b6101696101ae366004612ce7565b610877565b3480156101bf57600080fd5b506101c86109e4565b6040519081526020015b60405180910390f35b3480156101e757600080fd5b5060335460ff1660405190151581526020016101d2565b34801561020a57600080fd5b5061021e610219366004612d5b565b610aa9565b6040516101d29190612dea565b34801561023757600080fd5b50610169610bd6565b34801561024c57600080fd5b50610169610be8565b34801561026157600080fd5b5061012f54610276906001600160a01b031681565b6040516001600160a01b0390911681526020016101d2565b34801561029a57600080fd5b506065546001600160a01b0316610276565b3480156102b857600080fd5b5061012d546102769064010000000090046001600160a01b031681565b6102e86102e3366004612f24565b610bf8565b60405167ffffffffffffffff90911681526020016101d2565b34801561030d57600080fd5b5061016961031c366004612af7565b610fa3565b34801561032d57600080fd5b5061012e54610276906001600160a01b031681565b34801561034e57600080fd5b5061036261035d366004612f76565b611281565b604080519283526001600160a01b039091166020830152016101d2565b34801561038b57600080fd5b5061016961039a366004612af7565b6113bb565b3480156103ab57600080fd5b506103626103ba366004612fd0565b611448565b6101c86103cd36600461300d565b61152a565b306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614156104655760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201526b19195b1959d85d1958d85b1b60a21b60648201526084015b60405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166104c07f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546001600160a01b031690565b6001600160a01b03161461052b5760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201526b6163746976652070726f787960a01b606482015260840161045c565b6105348161177d565b6040805160008082526020820190925261055091839190611785565b50565b61055b611939565b600061013060008661ffff1661ffff1681526020019081526020016000206040518060800160405290816000820160009054906101000a900461ffff1661ffff1661ffff1681526020016000820160029054906101000a90046001600160a01b03166001600160a01b03166001600160a01b031681526020016001820160009054906101000a90046001600160a01b03166001600160a01b03166001600160a01b031681526020016001820160149054906101000a900460ff1660ff1660ff1681525050905084816000019061ffff16908161ffff16815250508381602001906001600160a01b031690816001600160a01b0316815250508281604001906001600160a01b031690816001600160a01b03168152505081816060019060ff16908160ff16815250508061013060008761ffff1661ffff16815260200190815260200160002060008201518160000160006101000a81548161ffff021916908361ffff16021790555060208201518160000160026101000a8154816001600160a01b0302191690836001600160a01b0316021790555060408201518160010160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060608201518160010160146101000a81548160ff021916908360ff160217905550905050806101316000866001600160a01b03166001600160a01b0316815260200190815260200160002060008201518160000160006101000a81548161ffff021916908361ffff16021790555060208201518160000160026101000a8154816001600160a01b0302191690836001600160a01b0316021790555060408201518160010160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060608201518160010160146101000a81548160ff021916908360ff160217905550905050836001600160a01b03168561ffff167f639dd7678d262a54d13718f5d54a4cf4c9289b611fee8ea5cc905c1518157e068560405161085691906001600160a01b0391909116815260200190565b60405180910390a35050505050565b61086d611939565b610875611993565b565b306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614156109055760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201526b19195b1959d85d1958d85b1b60a21b606482015260840161045c565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166109607f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546001600160a01b031690565b6001600160a01b0316146109cb5760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201526b6163746976652070726f787960a01b606482015260840161045c565b6109d48261177d565b6109e082826001611785565b5050565b6000306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610a845760405162461bcd60e51b815260206004820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c60448201527f6c6564207468726f7567682064656c656761746563616c6c0000000000000000606482015260840161045c565b507f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc90565b805160609060008167ffffffffffffffff811115610ac957610ac9612b8f565b604051908082528060200260200182016040528015610b0257816020015b610aef612a2d565b815260200190600190039081610ae75790505b50905060005b82811015610bce57848181518110610b2257610b22613057565b60200260200101516001600160a01b0316631865c57d6040518163ffffffff1660e01b815260040160006040518083038186803b158015610b6257600080fd5b505afa158015610b76573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610b9e9190810190613101565b828281518110610bb057610bb0613057565b60200260200101819052508080610bc69061323e565b915050610b08565b509392505050565b610bde611939565b61087560006119e5565b610bf0611939565b610875611a44565b6000610c02611a81565b600080610c0e88611ad4565b9092509050610c286001600160a01b03891633308a611b57565b61012d5487906001600160a01b038a81166401000000009092041614610cf057610c5c6001600160a01b038a16848a611c0e565b604051636e0b1ea760e11b81526004810189905260ff8316602482015260006044820152606481018890526001600160a01b0384169063dc163d4e90608401602060405180830381600087803b158015610cb557600080fd5b505af1158015610cc9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ced9190613259565b90505b61012e5461012d54610d17916001600160a01b036401000000009092048216911683611c0e565b61ffff861660011415610dfe5761012e5461012d546040517f0f5287b00000000000000000000000000000000000000000000000000000000081526001600160a01b0364010000000083048116600483015260248201859052600160448301526064820189905260006084830181905263ffffffff90931660a483015291929190911690630f5287b09060c401602060405180830381600087803b158015610dbe57600080fd5b505af1158015610dd2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610df6919061328a565b945050610f0c565b6000610e4986604080517f0100000000000000000000000000000000000000000000000000000000000000602082015260218082019390935281518082039093018352604101905290565b61012e5461012d546040517fc5a5ebda00000000000000000000000000000000000000000000000000000000815292935030926001600160a01b039283169263c5a5ebda92610eb59264010000000082049092169188918e91889163ffffffff16908a906004016132fd565b602060405180830381600087803b158015610ecf57600080fd5b505af1158015610ee3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f07919061328a565b955050505b61012d8054600090610f239063ffffffff1661334d565b825463ffffffff9182166101009390930a92830291909202199091161790556040805167ffffffffffffffff861681526001600160a01b038b16602082015290810189905233907f3d75c465c33301aa387417fd1ee8a2d936ac3157c21ac3eccbd830b1a4609faa9060600160405180910390a250505095945050505050565b600054610100900460ff1615808015610fc35750600054600160ff909116105b80610fdd5750303b158015610fdd575060005460ff166001145b61104f5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a6564000000000000000000000000000000000000606482015260840161045c565b6000805460ff191660011790558015611072576000805461ff0019166101001790555b61107a611d6b565b611082611dde565b61108a611e51565b611092611ebc565b61012d805463ffffffff1916905561012e805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b038416908117909155604080517f84acd1bb00000000000000000000000000000000000000000000000000000000815290516384acd1bb91600480820192602092909190829003018186803b15801561111b57600080fd5b505afa15801561112f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111539190613371565b61012f805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392831617905561012e546040517f1ff1e2860000000000000000000000000000000000000000000000000000000081526001600482015260006024820152911690631ff1e2869060440160206040518083038186803b1580156111d957600080fd5b505afa1580156111ed573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112119190613371565b61012d60046101000a8154816001600160a01b0302191690836001600160a01b0316021790555080156109e0576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15050565b60008061128c611a81565b61012e5460405163c3f511c160e01b81526000916001600160a01b03169063c3f511c1906112be90899060040161338e565b600060405180830381600087803b1580156112d857600080fd5b505af11580156112ec573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261131491908101906133e6565b905061131f81611f2f565b61132881611f9b565b6001600160a01b0316336001600160a01b0316146113a2576040517fa2bd777200000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f53656e646572206973206e6f7420746865206f776e6572210000000000000000604482015260640161045c565b6113ae86338787611fb0565b9250925050935093915050565b6113c3611939565b6001600160a01b03811661143f5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f6464726573730000000000000000000000000000000000000000000000000000606482015260840161045c565b610550816119e5565b600080611453611a81565b61012e5460405163c3f511c160e01b81526000916001600160a01b03169063c3f511c19061148590879060040161338e565b600060405180830381600087803b15801561149f57600080fd5b505af11580156114b3573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526114db91908101906133e6565b90506114e681611f2f565b60006114f182611f9b565b90506000806114ff8461227c565b91509150600061150e836122e2565b905061151c88858385611fb0565b965096505050505050915091565b6000611534611a81565b60008061154088611ad4565b9150915060008061155087611ad4565b909250905061156a6001600160a01b038b1633308c611b57565b61012d548995506001600160a01b038b811664010000000090920416146116335761159f6001600160a01b038b16858b611c0e565b604051636e0b1ea760e11b8152600481018a905260ff8416602482015260006044820181905260648201526001600160a01b0385169063dc163d4e90608401602060405180830381600087803b1580156115f857600080fd5b505af115801561160c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116309190613259565b94505b61012d546001600160a01b0388811664010000000090920416146117055761012d546116719064010000000090046001600160a01b03168387611c0e565b604051636e0b1ea760e11b8152600481018690526000602482015260ff82166044820152606481018790526001600160a01b0383169063dc163d4e90608401602060405180830381600087803b1580156116ca57600080fd5b505af11580156116de573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117029190613259565b94505b6117196001600160a01b0388168987612340565b866001600160a01b03168a6001600160a01b0316896001600160a01b03167ff2e2a58c01dc9b89916a15f9d426d4df34390782f1fc1786a7ae826bc414abd98860405161176891815260200190565b60405180910390a45050505095945050505050565b610550611939565b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff16156117bd576117b883612389565b505050565b826001600160a01b03166352d1902d6040518163ffffffff1660e01b815260040160206040518083038186803b1580156117f657600080fd5b505afa925050508015611826575060408051601f3d908101601f1916820190925261182391810190613259565b60015b6118985760405162461bcd60e51b815260206004820152602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201527f6f6e206973206e6f742055555053000000000000000000000000000000000000606482015260840161045c565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc811461192d5760405162461bcd60e51b815260206004820152602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f7860448201527f6961626c65555549440000000000000000000000000000000000000000000000606482015260840161045c565b506117b8838383612454565b6065546001600160a01b031633146108755760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161045c565b61199b612479565b6033805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b606580546001600160a01b0383811673ffffffffffffffffffffffffffffffffffffffff19831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b611a4c611a81565b6033805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586119c83390565b60335460ff16156108755760405162461bcd60e51b815260206004820152601060248201527f5061757361626c653a2070617573656400000000000000000000000000000000604482015260640161045c565b6001600160a01b038082166000908152610131602052604081206001810154919283921680611b2b5760405163237851e160e21b81526bffffffffffffffffffffffff19606087901b16600482015260240161045c565b6001919091015490947401000000000000000000000000000000000000000090910460ff169350915050565b6040516001600160a01b0380851660248301528316604482015260648101829052611c089085907f23b872dd00000000000000000000000000000000000000000000000000000000906084015b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff00000000000000000000000000000000000000000000000000000000909316929092179091526124cb565b50505050565b801580611cb057506040517fdd62ed3e0000000000000000000000000000000000000000000000000000000081523060048201526001600160a01b03838116602483015284169063dd62ed3e9060440160206040518083038186803b158015611c7657600080fd5b505afa158015611c8a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cae9190613259565b155b611d225760405162461bcd60e51b815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527f20746f206e6f6e2d7a65726f20616c6c6f77616e636500000000000000000000606482015260840161045c565b6040516001600160a01b0383166024820152604481018290526117b89084907f095ea7b30000000000000000000000000000000000000000000000000000000090606401611ba4565b600054610100900460ff16611dd65760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b606482015260840161045c565b6108756125b0565b600054610100900460ff16611e495760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b606482015260840161045c565b610875612627565b600054610100900460ff166108755760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b606482015260840161045c565b600054610100900460ff16611f275760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b606482015260840161045c565b61087561269b565b611f4481611f3f6001600061341b565b61270d565b600160ff1681600081518110611f5c57611f5c613057565b016020015160f81c14610550576040517fa9146eeb00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000611fa882602161270d565b506021015190565b600080600080611fbf86611ad4565b61012d546040517f70a082310000000000000000000000000000000000000000000000000000000081523060048201529294509092506000916401000000009091046001600160a01b0316906370a082319060240160206040518083038186803b15801561202c57600080fd5b505afa158015612040573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120649190613259565b61012d548796508895509091506001600160a01b03808616640100000000909204161461215e5761012d546120ab9064010000000090046001600160a01b03168483611c0e565b604051636e0b1ea760e11b8152600481018290526000602482015260ff83166044820152606481018790526001600160a01b0384169063dc163d4e90608401602060405180830381600087803b15801561210457600080fd5b505af1925050508015612134575060408051601f3d908101601f1916820190925261213191810190613259565b60015b6121585761012d5490945064010000000090046001600160a01b031692508361215e565b94508693505b6121726001600160a01b0388168987612340565b61012f546040517fa9e118930000000000000000000000000000000000000000000000000000000081526000916001600160a01b03169063a9e11893906121bd908d9060040161338e565b60006040518083038186803b1580156121d557600080fd5b505afa1580156121e9573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526122119190810190613502565b60a001516040805167ffffffffffffffff831681526001600160a01b0388811660208301529181018990529192508a16907f9634e0407482c730e10f73eecc33308988a787cbb548b5585ff97fdebf9fd3cd9060600160405180910390a25050505094509492505050565b60008061228a83604361270d565b8251600090849060229081106122a2576122a2613057565b0160200151845160f89190911c90600890869060219081106122c6576122c6613057565b01602001516043969096015160f89690961c901b019492505050565b61ffff8116600090815261013060205260408120546201000090046001600160a01b03168061233a5760405163237851e160e21b81526dffff000000000000000000000000606085901b16600482015260240161045c565b92915050565b6040516001600160a01b0383166024820152604481018290526117b89084907fa9059cbb0000000000000000000000000000000000000000000000000000000090606401611ba4565b6001600160a01b0381163b6124065760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201527f6f74206120636f6e747261637400000000000000000000000000000000000000606482015260840161045c565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b61245d83612748565b60008251118061246a5750805b156117b857611c088383612788565b60335460ff166108755760405162461bcd60e51b815260206004820152601460248201527f5061757361626c653a206e6f7420706175736564000000000000000000000000604482015260640161045c565b6000612520826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166128939092919063ffffffff16565b8051909150156117b8578080602001905181019061253e9190613627565b6117b85760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f74207375636365656400000000000000000000000000000000000000000000606482015260840161045c565b600054610100900460ff1661261b5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b606482015260840161045c565b6033805460ff19169055565b600054610100900460ff166126925760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b606482015260840161045c565b610875336119e5565b600054610100900460ff166127065760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b606482015260840161045c565b6001609755565b80825110156109e0576040517f82e6504400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61275181612389565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b60606001600160a01b0383163b6128075760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f60448201527f6e74726163740000000000000000000000000000000000000000000000000000606482015260840161045c565b600080846001600160a01b0316846040516128229190613642565b600060405180830381855af49150503d806000811461285d576040519150601f19603f3d011682016040523d82523d6000602084013e612862565b606091505b509150915061288a828260405180606001604052806027815260200161365f602791396128ac565b95945050505050565b60606128a284846000856128e5565b90505b9392505050565b606083156128bb5750816128a5565b8251156128cb5782518084602001fd5b8160405162461bcd60e51b815260040161045c919061338e565b60608247101561295d5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c0000000000000000000000000000000000000000000000000000606482015260840161045c565b6001600160a01b0385163b6129b45760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161045c565b600080866001600160a01b031685876040516129d09190613642565b60006040518083038185875af1925050503d8060008114612a0d576040519150601f19603f3d011682016040523d82523d6000602084013e612a12565b606091505b5091509150612a228282866128ac565b979650505050505050565b6040518060c0016040528060001515815260200160608152602001612a6e604051806040016040528060006001600160a01b03168152602001600081525090565b8152602001612a93604051806040016040528060008152602001600060ff1681525090565b8152602001612ab8604051806040016040528060008152602001600060ff1681525090565b8152602001612add604051806040016040528060008152602001600060ff1681525090565b905290565b6001600160a01b038116811461055057600080fd5b600060208284031215612b0957600080fd5b81356128a581612ae2565b61ffff8116811461055057600080fd5b60ff8116811461055057600080fd5b60008060008060808587031215612b4957600080fd5b8435612b5481612b14565b93506020850135612b6481612ae2565b92506040850135612b7481612ae2565b91506060850135612b8481612b24565b939692955090935050565b634e487b7160e01b600052604160045260246000fd5b6040805190810167ffffffffffffffff81118282101715612bc857612bc8612b8f565b60405290565b60405160c0810167ffffffffffffffff81118282101715612bc857612bc8612b8f565b6040516080810167ffffffffffffffff81118282101715612bc857612bc8612b8f565b604051610160810167ffffffffffffffff81118282101715612bc857612bc8612b8f565b604051601f8201601f1916810167ffffffffffffffff81118282101715612c6157612c61612b8f565b604052919050565b600067ffffffffffffffff821115612c8357612c83612b8f565b50601f01601f191660200190565b600082601f830112612ca257600080fd5b8135612cb5612cb082612c69565b612c38565b818152846020838601011115612cca57600080fd5b816020850160208301376000918101602001919091529392505050565b60008060408385031215612cfa57600080fd5b8235612d0581612ae2565b9150602083013567ffffffffffffffff811115612d2157600080fd5b612d2d85828601612c91565b9150509250929050565b600067ffffffffffffffff821115612d5157612d51612b8f565b5060051b60200190565b60006020808385031215612d6e57600080fd5b823567ffffffffffffffff811115612d8557600080fd5b8301601f81018513612d9657600080fd5b8035612da4612cb082612d37565b81815260059190911b82018301908381019087831115612dc357600080fd5b928401925b82841015612a22578335612ddb81612ae2565b82529284019290840190612dc8565b60006020808301818452808551808352604092508286019150828160051b8701018488016000805b84811015612f1557898403603f190186528251805115158552888101516101408a870181905281519087018190526101608701918b019085905b80821015612e8657612e7284845180516001600160a01b03168252602090810151910152565b928b0192918c019160019190910190612e4c565b50505088820151612eac8a88018280516001600160a01b03168252602090810151910152565b5060608201516080612ecd818901838051825260209081015160ff16910152565b830151805160c089015260209081015160ff90811660e08a015260a09094015180516101008a0152015190921661012090960195909552509487019491870191600101612e12565b50919998505050505050505050565b600080600080600060a08688031215612f3c57600080fd5b8535612f4781612ae2565b945060208601359350604086013592506060860135612f6581612b14565b949793965091946080013592915050565b600080600060608486031215612f8b57600080fd5b833567ffffffffffffffff811115612fa257600080fd5b612fae86828701612c91565b9350506020840135612fbf81612ae2565b929592945050506040919091013590565b600060208284031215612fe257600080fd5b813567ffffffffffffffff811115612ff957600080fd5b61300584828501612c91565b949350505050565b600080600080600060a0868803121561302557600080fd5b853561303081612ae2565b945060208601359350604086013561304781612ae2565b92506060860135612f6581612ae2565b634e487b7160e01b600052603260045260246000fd5b8051801515811461307d57600080fd5b919050565b60006040828403121561309457600080fd5b61309c612ba5565b905081516130a981612ae2565b808252506020820151602082015292915050565b805161307d81612b24565b6000604082840312156130da57600080fd5b6130e2612ba5565b90508151815260208201516130f681612b24565b602082015292915050565b6000602080838503121561311457600080fd5b825167ffffffffffffffff8082111561312c57600080fd5b90840190610140828703121561314157600080fd5b613149612bce565b6131528361306d565b8152838301518281111561316557600080fd5b83019150601f8201871361317857600080fd5b8151613186612cb082612d37565b81815260069190911b830185019085810190898311156131a557600080fd5b938601935b828510156131ce576131bc8a86613082565b825286820191506040850194506131aa565b83870152506131e290508760408501613082565b60408201526131f487608085016130c8565b60608201526132068760c085016130c8565b60808201526132198761010085016130c8565b60a08201529695505050505050565b634e487b7160e01b600052601160045260246000fd5b600060001982141561325257613252613228565b5060010190565b60006020828403121561326b57600080fd5b5051919050565b805167ffffffffffffffff8116811461307d57600080fd5b60006020828403121561329c57600080fd5b6128a582613272565b60005b838110156132c05781810151838201526020016132a8565b83811115611c085750506000910152565b600081518084526132e98160208601602086016132a5565b601f01601f19169290920160200192915050565b6001600160a01b038716815285602082015261ffff8516604082015283606082015263ffffffff8316608082015260c060a0820152600061334160c08301846132d1565b98975050505050505050565b600063ffffffff8083168181141561336757613367613228565b6001019392505050565b60006020828403121561338357600080fd5b81516128a581612ae2565b6020815260006128a560208301846132d1565b600082601f8301126133b257600080fd5b81516133c0612cb082612c69565b8181528460208386010111156133d557600080fd5b6130058260208301602087016132a5565b6000602082840312156133f857600080fd5b815167ffffffffffffffff81111561340f57600080fd5b613005848285016133a1565b6000821982111561342e5761342e613228565b500190565b805163ffffffff8116811461307d57600080fd5b805161307d81612b14565b600082601f83011261346357600080fd5b81516020613473612cb083612d37565b82815260079290921b8401810191818101908684111561349257600080fd5b8286015b848110156134f757608081890312156134af5760008081fd5b6134b7612bf1565b8151815284820151858201526040808301516134d281612b24565b908201526060828101516134e581612b24565b90820152835291830191608001613496565b509695505050505050565b60006020828403121561351457600080fd5b815167ffffffffffffffff8082111561352c57600080fd5b90830190610160828603121561354157600080fd5b613549612c14565b613552836130bd565b815261356060208401613433565b602082015261357160408401613433565b604082015261358260608401613447565b60608201526080830151608082015261359d60a08401613272565b60a08201526135ae60c084016130bd565b60c082015260e0830151828111156135c557600080fd5b6135d1878286016133a1565b60e0830152506101006135e5818501613433565b9082015261012083810151838111156135fd57600080fd5b61360988828701613452565b91830191909152506101409283015192810192909252509392505050565b60006020828403121561363957600080fd5b6128a58261306d565b600082516136548184602087016132a5565b919091019291505056fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a2646970667358221220121c9a77e13a66339180882e0215707015e767edbeea73a0893ba4edf436d7a364736f6c63430008090033",
  "deployedBytecode": "0x6080604052600436106101445760003560e01c806384acd1bb116100c0578063c6328a4611610074578063f2fde38b11610059578063f2fde38b1461037f578063f6bf28b51461039f578063fe4bc67a146103bf57600080fd5b8063c6328a4614610321578063cd5af9ae1461034257600080fd5b8063a174e5b7116100a5578063a174e5b7146102ac578063b1719a57146102d5578063c4d66de81461030157600080fd5b806384acd1bb146102555780638da5cb5b1461028e57600080fd5b806352d1902d116101175780636bde354a116100fc5780636bde354a146101fe578063715018a61461022b5780638456cb591461024057600080fd5b806352d1902d146101b35780635c975abb146101db57600080fd5b80633659cfe6146101495780633954802a1461016b5780633f4ba83a1461018b5780634f1ef286146101a0575b600080fd5b34801561015557600080fd5b50610169610164366004612af7565b6103d2565b005b34801561017757600080fd5b50610169610186366004612b33565b610553565b34801561019757600080fd5b50610169610865565b6101696101ae366004612ce7565b610877565b3480156101bf57600080fd5b506101c86109e4565b6040519081526020015b60405180910390f35b3480156101e757600080fd5b5060335460ff1660405190151581526020016101d2565b34801561020a57600080fd5b5061021e610219366004612d5b565b610aa9565b6040516101d29190612dea565b34801561023757600080fd5b50610169610bd6565b34801561024c57600080fd5b50610169610be8565b34801561026157600080fd5b5061012f54610276906001600160a01b031681565b6040516001600160a01b0390911681526020016101d2565b34801561029a57600080fd5b506065546001600160a01b0316610276565b3480156102b857600080fd5b5061012d546102769064010000000090046001600160a01b031681565b6102e86102e3366004612f24565b610bf8565b60405167ffffffffffffffff90911681526020016101d2565b34801561030d57600080fd5b5061016961031c366004612af7565b610fa3565b34801561032d57600080fd5b5061012e54610276906001600160a01b031681565b34801561034e57600080fd5b5061036261035d366004612f76565b611281565b604080519283526001600160a01b039091166020830152016101d2565b34801561038b57600080fd5b5061016961039a366004612af7565b6113bb565b3480156103ab57600080fd5b506103626103ba366004612fd0565b611448565b6101c86103cd36600461300d565b61152a565b306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614156104655760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201526b19195b1959d85d1958d85b1b60a21b60648201526084015b60405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166104c07f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546001600160a01b031690565b6001600160a01b03161461052b5760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201526b6163746976652070726f787960a01b606482015260840161045c565b6105348161177d565b6040805160008082526020820190925261055091839190611785565b50565b61055b611939565b600061013060008661ffff1661ffff1681526020019081526020016000206040518060800160405290816000820160009054906101000a900461ffff1661ffff1661ffff1681526020016000820160029054906101000a90046001600160a01b03166001600160a01b03166001600160a01b031681526020016001820160009054906101000a90046001600160a01b03166001600160a01b03166001600160a01b031681526020016001820160149054906101000a900460ff1660ff1660ff1681525050905084816000019061ffff16908161ffff16815250508381602001906001600160a01b031690816001600160a01b0316815250508281604001906001600160a01b031690816001600160a01b03168152505081816060019060ff16908160ff16815250508061013060008761ffff1661ffff16815260200190815260200160002060008201518160000160006101000a81548161ffff021916908361ffff16021790555060208201518160000160026101000a8154816001600160a01b0302191690836001600160a01b0316021790555060408201518160010160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060608201518160010160146101000a81548160ff021916908360ff160217905550905050806101316000866001600160a01b03166001600160a01b0316815260200190815260200160002060008201518160000160006101000a81548161ffff021916908361ffff16021790555060208201518160000160026101000a8154816001600160a01b0302191690836001600160a01b0316021790555060408201518160010160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060608201518160010160146101000a81548160ff021916908360ff160217905550905050836001600160a01b03168561ffff167f639dd7678d262a54d13718f5d54a4cf4c9289b611fee8ea5cc905c1518157e068560405161085691906001600160a01b0391909116815260200190565b60405180910390a35050505050565b61086d611939565b610875611993565b565b306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614156109055760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201526b19195b1959d85d1958d85b1b60a21b606482015260840161045c565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166109607f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546001600160a01b031690565b6001600160a01b0316146109cb5760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201526b6163746976652070726f787960a01b606482015260840161045c565b6109d48261177d565b6109e082826001611785565b5050565b6000306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610a845760405162461bcd60e51b815260206004820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c60448201527f6c6564207468726f7567682064656c656761746563616c6c0000000000000000606482015260840161045c565b507f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc90565b805160609060008167ffffffffffffffff811115610ac957610ac9612b8f565b604051908082528060200260200182016040528015610b0257816020015b610aef612a2d565b815260200190600190039081610ae75790505b50905060005b82811015610bce57848181518110610b2257610b22613057565b60200260200101516001600160a01b0316631865c57d6040518163ffffffff1660e01b815260040160006040518083038186803b158015610b6257600080fd5b505afa158015610b76573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610b9e9190810190613101565b828281518110610bb057610bb0613057565b60200260200101819052508080610bc69061323e565b915050610b08565b509392505050565b610bde611939565b61087560006119e5565b610bf0611939565b610875611a44565b6000610c02611a81565b600080610c0e88611ad4565b9092509050610c286001600160a01b03891633308a611b57565b61012d5487906001600160a01b038a81166401000000009092041614610cf057610c5c6001600160a01b038a16848a611c0e565b604051636e0b1ea760e11b81526004810189905260ff8316602482015260006044820152606481018890526001600160a01b0384169063dc163d4e90608401602060405180830381600087803b158015610cb557600080fd5b505af1158015610cc9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ced9190613259565b90505b61012e5461012d54610d17916001600160a01b036401000000009092048216911683611c0e565b61ffff861660011415610dfe5761012e5461012d546040517f0f5287b00000000000000000000000000000000000000000000000000000000081526001600160a01b0364010000000083048116600483015260248201859052600160448301526064820189905260006084830181905263ffffffff90931660a483015291929190911690630f5287b09060c401602060405180830381600087803b158015610dbe57600080fd5b505af1158015610dd2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610df6919061328a565b945050610f0c565b6000610e4986604080517f0100000000000000000000000000000000000000000000000000000000000000602082015260218082019390935281518082039093018352604101905290565b61012e5461012d546040517fc5a5ebda00000000000000000000000000000000000000000000000000000000815292935030926001600160a01b039283169263c5a5ebda92610eb59264010000000082049092169188918e91889163ffffffff16908a906004016132fd565b602060405180830381600087803b158015610ecf57600080fd5b505af1158015610ee3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f07919061328a565b955050505b61012d8054600090610f239063ffffffff1661334d565b825463ffffffff9182166101009390930a92830291909202199091161790556040805167ffffffffffffffff861681526001600160a01b038b16602082015290810189905233907f3d75c465c33301aa387417fd1ee8a2d936ac3157c21ac3eccbd830b1a4609faa9060600160405180910390a250505095945050505050565b600054610100900460ff1615808015610fc35750600054600160ff909116105b80610fdd5750303b158015610fdd575060005460ff166001145b61104f5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a6564000000000000000000000000000000000000606482015260840161045c565b6000805460ff191660011790558015611072576000805461ff0019166101001790555b61107a611d6b565b611082611dde565b61108a611e51565b611092611ebc565b61012d805463ffffffff1916905561012e805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b038416908117909155604080517f84acd1bb00000000000000000000000000000000000000000000000000000000815290516384acd1bb91600480820192602092909190829003018186803b15801561111b57600080fd5b505afa15801561112f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111539190613371565b61012f805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392831617905561012e546040517f1ff1e2860000000000000000000000000000000000000000000000000000000081526001600482015260006024820152911690631ff1e2869060440160206040518083038186803b1580156111d957600080fd5b505afa1580156111ed573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112119190613371565b61012d60046101000a8154816001600160a01b0302191690836001600160a01b0316021790555080156109e0576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15050565b60008061128c611a81565b61012e5460405163c3f511c160e01b81526000916001600160a01b03169063c3f511c1906112be90899060040161338e565b600060405180830381600087803b1580156112d857600080fd5b505af11580156112ec573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261131491908101906133e6565b905061131f81611f2f565b61132881611f9b565b6001600160a01b0316336001600160a01b0316146113a2576040517fa2bd777200000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f53656e646572206973206e6f7420746865206f776e6572210000000000000000604482015260640161045c565b6113ae86338787611fb0565b9250925050935093915050565b6113c3611939565b6001600160a01b03811661143f5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f6464726573730000000000000000000000000000000000000000000000000000606482015260840161045c565b610550816119e5565b600080611453611a81565b61012e5460405163c3f511c160e01b81526000916001600160a01b03169063c3f511c19061148590879060040161338e565b600060405180830381600087803b15801561149f57600080fd5b505af11580156114b3573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526114db91908101906133e6565b90506114e681611f2f565b60006114f182611f9b565b90506000806114ff8461227c565b91509150600061150e836122e2565b905061151c88858385611fb0565b965096505050505050915091565b6000611534611a81565b60008061154088611ad4565b9150915060008061155087611ad4565b909250905061156a6001600160a01b038b1633308c611b57565b61012d548995506001600160a01b038b811664010000000090920416146116335761159f6001600160a01b038b16858b611c0e565b604051636e0b1ea760e11b8152600481018a905260ff8416602482015260006044820181905260648201526001600160a01b0385169063dc163d4e90608401602060405180830381600087803b1580156115f857600080fd5b505af115801561160c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116309190613259565b94505b61012d546001600160a01b0388811664010000000090920416146117055761012d546116719064010000000090046001600160a01b03168387611c0e565b604051636e0b1ea760e11b8152600481018690526000602482015260ff82166044820152606481018790526001600160a01b0383169063dc163d4e90608401602060405180830381600087803b1580156116ca57600080fd5b505af11580156116de573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117029190613259565b94505b6117196001600160a01b0388168987612340565b866001600160a01b03168a6001600160a01b0316896001600160a01b03167ff2e2a58c01dc9b89916a15f9d426d4df34390782f1fc1786a7ae826bc414abd98860405161176891815260200190565b60405180910390a45050505095945050505050565b610550611939565b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff16156117bd576117b883612389565b505050565b826001600160a01b03166352d1902d6040518163ffffffff1660e01b815260040160206040518083038186803b1580156117f657600080fd5b505afa925050508015611826575060408051601f3d908101601f1916820190925261182391810190613259565b60015b6118985760405162461bcd60e51b815260206004820152602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201527f6f6e206973206e6f742055555053000000000000000000000000000000000000606482015260840161045c565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc811461192d5760405162461bcd60e51b815260206004820152602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f7860448201527f6961626c65555549440000000000000000000000000000000000000000000000606482015260840161045c565b506117b8838383612454565b6065546001600160a01b031633146108755760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161045c565b61199b612479565b6033805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b606580546001600160a01b0383811673ffffffffffffffffffffffffffffffffffffffff19831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b611a4c611a81565b6033805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586119c83390565b60335460ff16156108755760405162461bcd60e51b815260206004820152601060248201527f5061757361626c653a2070617573656400000000000000000000000000000000604482015260640161045c565b6001600160a01b038082166000908152610131602052604081206001810154919283921680611b2b5760405163237851e160e21b81526bffffffffffffffffffffffff19606087901b16600482015260240161045c565b6001919091015490947401000000000000000000000000000000000000000090910460ff169350915050565b6040516001600160a01b0380851660248301528316604482015260648101829052611c089085907f23b872dd00000000000000000000000000000000000000000000000000000000906084015b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff00000000000000000000000000000000000000000000000000000000909316929092179091526124cb565b50505050565b801580611cb057506040517fdd62ed3e0000000000000000000000000000000000000000000000000000000081523060048201526001600160a01b03838116602483015284169063dd62ed3e9060440160206040518083038186803b158015611c7657600080fd5b505afa158015611c8a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cae9190613259565b155b611d225760405162461bcd60e51b815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527f20746f206e6f6e2d7a65726f20616c6c6f77616e636500000000000000000000606482015260840161045c565b6040516001600160a01b0383166024820152604481018290526117b89084907f095ea7b30000000000000000000000000000000000000000000000000000000090606401611ba4565b600054610100900460ff16611dd65760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b606482015260840161045c565b6108756125b0565b600054610100900460ff16611e495760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b606482015260840161045c565b610875612627565b600054610100900460ff166108755760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b606482015260840161045c565b600054610100900460ff16611f275760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b606482015260840161045c565b61087561269b565b611f4481611f3f6001600061341b565b61270d565b600160ff1681600081518110611f5c57611f5c613057565b016020015160f81c14610550576040517fa9146eeb00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000611fa882602161270d565b506021015190565b600080600080611fbf86611ad4565b61012d546040517f70a082310000000000000000000000000000000000000000000000000000000081523060048201529294509092506000916401000000009091046001600160a01b0316906370a082319060240160206040518083038186803b15801561202c57600080fd5b505afa158015612040573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120649190613259565b61012d548796508895509091506001600160a01b03808616640100000000909204161461215e5761012d546120ab9064010000000090046001600160a01b03168483611c0e565b604051636e0b1ea760e11b8152600481018290526000602482015260ff83166044820152606481018790526001600160a01b0384169063dc163d4e90608401602060405180830381600087803b15801561210457600080fd5b505af1925050508015612134575060408051601f3d908101601f1916820190925261213191810190613259565b60015b6121585761012d5490945064010000000090046001600160a01b031692508361215e565b94508693505b6121726001600160a01b0388168987612340565b61012f546040517fa9e118930000000000000000000000000000000000000000000000000000000081526000916001600160a01b03169063a9e11893906121bd908d9060040161338e565b60006040518083038186803b1580156121d557600080fd5b505afa1580156121e9573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526122119190810190613502565b60a001516040805167ffffffffffffffff831681526001600160a01b0388811660208301529181018990529192508a16907f9634e0407482c730e10f73eecc33308988a787cbb548b5585ff97fdebf9fd3cd9060600160405180910390a25050505094509492505050565b60008061228a83604361270d565b8251600090849060229081106122a2576122a2613057565b0160200151845160f89190911c90600890869060219081106122c6576122c6613057565b01602001516043969096015160f89690961c901b019492505050565b61ffff8116600090815261013060205260408120546201000090046001600160a01b03168061233a5760405163237851e160e21b81526dffff000000000000000000000000606085901b16600482015260240161045c565b92915050565b6040516001600160a01b0383166024820152604481018290526117b89084907fa9059cbb0000000000000000000000000000000000000000000000000000000090606401611ba4565b6001600160a01b0381163b6124065760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201527f6f74206120636f6e747261637400000000000000000000000000000000000000606482015260840161045c565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b61245d83612748565b60008251118061246a5750805b156117b857611c088383612788565b60335460ff166108755760405162461bcd60e51b815260206004820152601460248201527f5061757361626c653a206e6f7420706175736564000000000000000000000000604482015260640161045c565b6000612520826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166128939092919063ffffffff16565b8051909150156117b8578080602001905181019061253e9190613627565b6117b85760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f74207375636365656400000000000000000000000000000000000000000000606482015260840161045c565b600054610100900460ff1661261b5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b606482015260840161045c565b6033805460ff19169055565b600054610100900460ff166126925760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b606482015260840161045c565b610875336119e5565b600054610100900460ff166127065760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b606482015260840161045c565b6001609755565b80825110156109e0576040517f82e6504400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61275181612389565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b60606001600160a01b0383163b6128075760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f60448201527f6e74726163740000000000000000000000000000000000000000000000000000606482015260840161045c565b600080846001600160a01b0316846040516128229190613642565b600060405180830381855af49150503d806000811461285d576040519150601f19603f3d011682016040523d82523d6000602084013e612862565b606091505b509150915061288a828260405180606001604052806027815260200161365f602791396128ac565b95945050505050565b60606128a284846000856128e5565b90505b9392505050565b606083156128bb5750816128a5565b8251156128cb5782518084602001fd5b8160405162461bcd60e51b815260040161045c919061338e565b60608247101561295d5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c0000000000000000000000000000000000000000000000000000606482015260840161045c565b6001600160a01b0385163b6129b45760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161045c565b600080866001600160a01b031685876040516129d09190613642565b60006040518083038185875af1925050503d8060008114612a0d576040519150601f19603f3d011682016040523d82523d6000602084013e612a12565b606091505b5091509150612a228282866128ac565b979650505050505050565b6040518060c0016040528060001515815260200160608152602001612a6e604051806040016040528060006001600160a01b03168152602001600081525090565b8152602001612a93604051806040016040528060008152602001600060ff1681525090565b8152602001612ab8604051806040016040528060008152602001600060ff1681525090565b8152602001612add604051806040016040528060008152602001600060ff1681525090565b905290565b6001600160a01b038116811461055057600080fd5b600060208284031215612b0957600080fd5b81356128a581612ae2565b61ffff8116811461055057600080fd5b60ff8116811461055057600080fd5b60008060008060808587031215612b4957600080fd5b8435612b5481612b14565b93506020850135612b6481612ae2565b92506040850135612b7481612ae2565b91506060850135612b8481612b24565b939692955090935050565b634e487b7160e01b600052604160045260246000fd5b6040805190810167ffffffffffffffff81118282101715612bc857612bc8612b8f565b60405290565b60405160c0810167ffffffffffffffff81118282101715612bc857612bc8612b8f565b6040516080810167ffffffffffffffff81118282101715612bc857612bc8612b8f565b604051610160810167ffffffffffffffff81118282101715612bc857612bc8612b8f565b604051601f8201601f1916810167ffffffffffffffff81118282101715612c6157612c61612b8f565b604052919050565b600067ffffffffffffffff821115612c8357612c83612b8f565b50601f01601f191660200190565b600082601f830112612ca257600080fd5b8135612cb5612cb082612c69565b612c38565b818152846020838601011115612cca57600080fd5b816020850160208301376000918101602001919091529392505050565b60008060408385031215612cfa57600080fd5b8235612d0581612ae2565b9150602083013567ffffffffffffffff811115612d2157600080fd5b612d2d85828601612c91565b9150509250929050565b600067ffffffffffffffff821115612d5157612d51612b8f565b5060051b60200190565b60006020808385031215612d6e57600080fd5b823567ffffffffffffffff811115612d8557600080fd5b8301601f81018513612d9657600080fd5b8035612da4612cb082612d37565b81815260059190911b82018301908381019087831115612dc357600080fd5b928401925b82841015612a22578335612ddb81612ae2565b82529284019290840190612dc8565b60006020808301818452808551808352604092508286019150828160051b8701018488016000805b84811015612f1557898403603f190186528251805115158552888101516101408a870181905281519087018190526101608701918b019085905b80821015612e8657612e7284845180516001600160a01b03168252602090810151910152565b928b0192918c019160019190910190612e4c565b50505088820151612eac8a88018280516001600160a01b03168252602090810151910152565b5060608201516080612ecd818901838051825260209081015160ff16910152565b830151805160c089015260209081015160ff90811660e08a015260a09094015180516101008a0152015190921661012090960195909552509487019491870191600101612e12565b50919998505050505050505050565b600080600080600060a08688031215612f3c57600080fd5b8535612f4781612ae2565b945060208601359350604086013592506060860135612f6581612b14565b949793965091946080013592915050565b600080600060608486031215612f8b57600080fd5b833567ffffffffffffffff811115612fa257600080fd5b612fae86828701612c91565b9350506020840135612fbf81612ae2565b929592945050506040919091013590565b600060208284031215612fe257600080fd5b813567ffffffffffffffff811115612ff957600080fd5b61300584828501612c91565b949350505050565b600080600080600060a0868803121561302557600080fd5b853561303081612ae2565b945060208601359350604086013561304781612ae2565b92506060860135612f6581612ae2565b634e487b7160e01b600052603260045260246000fd5b8051801515811461307d57600080fd5b919050565b60006040828403121561309457600080fd5b61309c612ba5565b905081516130a981612ae2565b808252506020820151602082015292915050565b805161307d81612b24565b6000604082840312156130da57600080fd5b6130e2612ba5565b90508151815260208201516130f681612b24565b602082015292915050565b6000602080838503121561311457600080fd5b825167ffffffffffffffff8082111561312c57600080fd5b90840190610140828703121561314157600080fd5b613149612bce565b6131528361306d565b8152838301518281111561316557600080fd5b83019150601f8201871361317857600080fd5b8151613186612cb082612d37565b81815260069190911b830185019085810190898311156131a557600080fd5b938601935b828510156131ce576131bc8a86613082565b825286820191506040850194506131aa565b83870152506131e290508760408501613082565b60408201526131f487608085016130c8565b60608201526132068760c085016130c8565b60808201526132198761010085016130c8565b60a08201529695505050505050565b634e487b7160e01b600052601160045260246000fd5b600060001982141561325257613252613228565b5060010190565b60006020828403121561326b57600080fd5b5051919050565b805167ffffffffffffffff8116811461307d57600080fd5b60006020828403121561329c57600080fd5b6128a582613272565b60005b838110156132c05781810151838201526020016132a8565b83811115611c085750506000910152565b600081518084526132e98160208601602086016132a5565b601f01601f19169290920160200192915050565b6001600160a01b038716815285602082015261ffff8516604082015283606082015263ffffffff8316608082015260c060a0820152600061334160c08301846132d1565b98975050505050505050565b600063ffffffff8083168181141561336757613367613228565b6001019392505050565b60006020828403121561338357600080fd5b81516128a581612ae2565b6020815260006128a560208301846132d1565b600082601f8301126133b257600080fd5b81516133c0612cb082612c69565b8181528460208386010111156133d557600080fd5b6130058260208301602087016132a5565b6000602082840312156133f857600080fd5b815167ffffffffffffffff81111561340f57600080fd5b613005848285016133a1565b6000821982111561342e5761342e613228565b500190565b805163ffffffff8116811461307d57600080fd5b805161307d81612b14565b600082601f83011261346357600080fd5b81516020613473612cb083612d37565b82815260079290921b8401810191818101908684111561349257600080fd5b8286015b848110156134f757608081890312156134af5760008081fd5b6134b7612bf1565b8151815284820151858201526040808301516134d281612b24565b908201526060828101516134e581612b24565b90820152835291830191608001613496565b509695505050505050565b60006020828403121561351457600080fd5b815167ffffffffffffffff8082111561352c57600080fd5b90830190610160828603121561354157600080fd5b613549612c14565b613552836130bd565b815261356060208401613433565b602082015261357160408401613433565b604082015261358260608401613447565b60608201526080830151608082015261359d60a08401613272565b60a08201526135ae60c084016130bd565b60c082015260e0830151828111156135c557600080fd5b6135d1878286016133a1565b60e0830152506101006135e5818501613433565b9082015261012083810151838111156135fd57600080fd5b61360988828701613452565b91830191909152506101409283015192810192909252509392505050565b60006020828403121561363957600080fd5b6128a58261306d565b600082516136548184602087016132a5565b919091019291505056fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a2646970667358221220121c9a77e13a66339180882e0215707015e767edbeea73a0893ba4edf436d7a364736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "getPoolStates(address[])": {
        "details": "TODO : when pools are done",
        "params": {
          "poolAddresses": "Addresses of pools"
        },
        "returns": {
          "_0": "PoolState List of objects of pool details"
        }
      },
      "onChainSwap(address,uint256,address,address,uint256)": {
        "params": {
          "fromToken": "the token the user wants to swap from",
          "inputAmount": "the amount of tokens the user wants to swap from",
          "minimumOutputAmount": "the min amount the user would like to receive, or revert",
          "toOwner": "the address of token beneficiary",
          "toToken": "the token the user wants to swap to"
        },
        "returns": {
          "outputAmount": "The amount of tokent that will be received"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "proxiableUUID()": {
        "details": "Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate that the this implementation remains valid after an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier."
      },
      "receiveAndSwap(bytes)": {
        "params": {
          "encodedVm": "A byte array containing a VAA signed by the guardians."
        },
        "returns": {
          "outputAmount": "Amount that user will receive",
          "outputToken": "Type of token that user will receive"
        }
      },
      "receiveAndSwap(bytes,address,uint256)": {
        "details": "The transaction can only be redeemed by the recipient, logical owner.",
        "params": {
          "encodedVm": "A byte array containing a VAA signed by the guardians.",
          "minimumOutputAmount": "Minimum output amount expected",
          "toToken": "the token address user wants to swap from"
        },
        "returns": {
          "outputAmount": "Amount that user will receive"
        }
      },
      "registerToken(uint16,address,address,uint8)": {
        "details": "Only contract deployer can register tokens and pools",
        "params": {
          "poolAddress": "Contract address of pool on current chain",
          "tokenAddress": "Token contract address",
          "tokenIndexInPool": "Token index in given pool on current chain",
          "tokenNumber": "Token ID on current chain"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "swapAndTransfer(address,uint256,uint256,uint16,bytes32)": {
        "params": {
          "fromToken": "the token user wants to swap from",
          "inputAmount": "the amount of tokens user wants to swap from",
          "toOwner": "the address of token beneficiary",
          "wormholeRecipientChain": "Wormhole receiver chain"
        },
        "returns": {
          "wormholeSequence": "Wormhole Sequence"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "upgradeTo(address)": {
        "details": "Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      },
      "upgradeToAndCall(address,bytes)": {
        "details": "Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "getPoolStates(address[])": {
        "notice": "Gets liquidities for all given pool adresses"
      },
      "onChainSwap(address,uint256,address,address,uint256)": {
        "notice": "Swap two tokens using one chain"
      },
      "receiveAndSwap(bytes)": {
        "notice": "Complete a contract-controlled transfer of an ERC20 token and swaps for token address in payload. If swap fails, user receives swimUsd token."
      },
      "receiveAndSwap(bytes,address,uint256)": {
        "notice": "Complete a contract-controlled transfer of  an ERC20 token and swaps for toToken in parameters. If swap fails, user receives swimUsd token"
      },
      "registerToken(uint16,address,address,uint8)": {
        "notice": "Registers token and pool details"
      },
      "swapAndTransfer(address,uint256,uint256,uint16,bytes32)": {
        "notice": "Swap and send ERC20 token through portal"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 527,
        "contract": "contracts/Routing.sol:Routing",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 530,
        "contract": "contracts/Routing.sol:Routing",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 2055,
        "contract": "contracts/Routing.sol:Routing",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 828,
        "contract": "contracts/Routing.sol:Routing",
        "label": "_paused",
        "offset": 0,
        "slot": "51",
        "type": "t_bool"
      },
      {
        "astId": 933,
        "contract": "contracts/Routing.sol:Routing",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 10,
        "contract": "contracts/Routing.sol:Routing",
        "label": "_owner",
        "offset": 0,
        "slot": "101",
        "type": "t_address"
      },
      {
        "astId": 130,
        "contract": "contracts/Routing.sol:Routing",
        "label": "__gap",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 948,
        "contract": "contracts/Routing.sol:Routing",
        "label": "_status",
        "offset": 0,
        "slot": "151",
        "type": "t_uint256"
      },
      {
        "astId": 992,
        "contract": "contracts/Routing.sol:Routing",
        "label": "__gap",
        "offset": 0,
        "slot": "152",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 509,
        "contract": "contracts/Routing.sol:Routing",
        "label": "__gap",
        "offset": 0,
        "slot": "201",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 806,
        "contract": "contracts/Routing.sol:Routing",
        "label": "__gap",
        "offset": 0,
        "slot": "251",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 9218,
        "contract": "contracts/Routing.sol:Routing",
        "label": "wormholeNonce",
        "offset": 0,
        "slot": "301",
        "type": "t_uint32"
      },
      {
        "astId": 9220,
        "contract": "contracts/Routing.sol:Routing",
        "label": "swimUsdAddress",
        "offset": 4,
        "slot": "301",
        "type": "t_address"
      },
      {
        "astId": 9223,
        "contract": "contracts/Routing.sol:Routing",
        "label": "tokenBridge",
        "offset": 0,
        "slot": "302",
        "type": "t_contract(ITokenBridge)10552"
      },
      {
        "astId": 9226,
        "contract": "contracts/Routing.sol:Routing",
        "label": "wormhole",
        "offset": 0,
        "slot": "303",
        "type": "t_contract(IWormhole)10679"
      },
      {
        "astId": 9240,
        "contract": "contracts/Routing.sol:Routing",
        "label": "tokenNumberMapping",
        "offset": 0,
        "slot": "304",
        "type": "t_mapping(t_uint16,t_struct(TokenInfo)9235_storage)"
      },
      {
        "astId": 9245,
        "contract": "contracts/Routing.sol:Routing",
        "label": "tokenAddressMapping",
        "offset": 0,
        "slot": "305",
        "type": "t_mapping(t_address,t_struct(TokenInfo)9235_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(ITokenBridge)10552": {
        "encoding": "inplace",
        "label": "contract ITokenBridge",
        "numberOfBytes": "20"
      },
      "t_contract(IWormhole)10679": {
        "encoding": "inplace",
        "label": "contract IWormhole",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_struct(TokenInfo)9235_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct Routing.TokenInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(TokenInfo)9235_storage"
      },
      "t_mapping(t_uint16,t_struct(TokenInfo)9235_storage)": {
        "encoding": "mapping",
        "key": "t_uint16",
        "label": "mapping(uint16 => struct Routing.TokenInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(TokenInfo)9235_storage"
      },
      "t_struct(TokenInfo)9235_storage": {
        "encoding": "inplace",
        "label": "struct Routing.TokenInfo",
        "members": [
          {
            "astId": 9228,
            "contract": "contracts/Routing.sol:Routing",
            "label": "tokenNumber",
            "offset": 0,
            "slot": "0",
            "type": "t_uint16"
          },
          {
            "astId": 9230,
            "contract": "contracts/Routing.sol:Routing",
            "label": "tokenAddress",
            "offset": 2,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 9232,
            "contract": "contracts/Routing.sol:Routing",
            "label": "poolAddress",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 9234,
            "contract": "contracts/Routing.sol:Routing",
            "label": "tokenIndexInPool",
            "offset": 20,
            "slot": "1",
            "type": "t_uint8"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}